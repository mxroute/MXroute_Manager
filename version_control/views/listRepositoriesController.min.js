define(["angular","lodash","cjt/util/locale","cjt/util/table","uiBootstrap","cjt/filters/wrapFilter","cjt/services/cpanel/nvDataService","app/services/versionControlService","app/services/sseAPIService","cjt/services/alertService","cjt/directives/alert","cjt/directives/alertList","cjt/directives/actionButtonDirective"],function(angular,_,LOCALE,Table){"use strict";var app=angular.module("cpanel.versionControl");app.value("PAGE",PAGE);var controller=app.controller("ListRepositoriesController",["$scope","$window","$location","versionControlService","sseAPIService","PAGE","nvDataService","alertService","$timeout",function($scope,$window,$location,versionControlService,sseAPIService,PAGE,nvDataService,alertService,$timeout){var repositories=this;repositories.isLoading=false;repositories.list=[];repositories.cloningList=[];var sseURL=PAGE.securityToken+"/sse/UserTasks";var SSEObj;var events=["task_processing","task_complete","task_failed"];var config={json:true};repositories.homeDirPath=PAGE.homeDir;repositories.hasFilemanagerAccess=PAGE.hasFileManagerAccess==="0"?false:true;repositories.hasShellAccess=PAGE.hasShellAccess==="0"?false:true;var table=new Table;table.setSort("name","asc");repositories.meta=table.getMetadata();repositories.filteredList=table.getList();repositories.paginationMessage=table.paginationMessage;repositories.meta.pageSize=parseInt(PAGE.reposListPageSize,10);function searchByNameOrFolder(item,searchText){searchText=searchText.toLowerCase();return item.name.toLowerCase().indexOf(searchText)!==-1||item.repository_root.toLowerCase().indexOf(searchText)!==-1}table.setSearchFunction(searchByNameOrFolder);repositories.render=function(){repositories.filteredList=table.update()};repositories.sortList=function(){repositories.render()};repositories.selectPage=function(){repositories.render()};repositories.selectPageSize=function(){repositories.render();if(PAGE.reposListPageSize!==repositories.meta.pageSize){nvDataService.setObject({repos_list_page_size:repositories.meta.pageSize}).then(function(){PAGE.reposListPageSize=repositories.meta.pageSize}).catch(function(error){alertService.add({type:"danger",message:error.message,closeable:true,replace:false,group:"versionControl"})})}};repositories.searchList=function(){repositories.render()};repositories.init=function(){var pageErrors=PAGE.repoErrors;if(pageErrors.length>0){pageErrors.forEach(function(error){alertService.add({type:"danger",message:error,closeable:true,replace:false,group:"versionControl"})})}else{repositories.updateRepositoriesList(true)}};function extendRepositoryObject(repoObject){if(repoObject){repoObject.isExpanded=false;repoObject.detailsLoading=false;repoObject.delete_requested=false;repoObject.cloneState=""}return repoObject}function clearCloning(repoObject){if(repoObject){repoObject.cloneState="";repoObject.cloneInProgress=false;delete repoObject.cloneTaskID}return repoObject}repositories.updateRepositoriesList=function(forceLoad){repositories.isLoading=true;var attributeStr=forceLoad?"name,tasks":null;return versionControlService.listRepositories(forceLoad,attributeStr).then(function(response){repositories.list=_.map(response,function(obj){return extendRepositoryObject(obj)});for(var i=0,len=repositories.list.length;i<len;i++){if(repositories.list[i].cloneInProgress){repositories.cloningList.push(repositories.list[i])}}if(repositories.cloningList&&repositories.cloningList.length>0){sseAPIService.initialize()}table.load(repositories.list);repositories.render();repositories.isLoading=false},function(error){alertService.add({type:"danger",message:error.message,closeable:true,replace:false,group:"versionControl"});repositories.isLoading=false})};$scope.$on("sse:task_processing",function(event,data){var taskID=data.task_id;var cloneItem=_.find(repositories.cloningList,function(o){return o.cloneTaskID===taskID});if(cloneItem){var unfilteredIndex=_.indexOf(repositories.list,cloneItem);if(unfilteredIndex!==-1){cloneItem.cloneState="processing";_.extend(repositories.list[unfilteredIndex],cloneItem);$scope.$apply(repositories.render)}}});$scope.$on("sse:task_complete",function(event,data){var taskID=data.task_id;var cloneItem=_.find(repositories.cloningList,function(o){return o.cloneTaskID===taskID});if(cloneItem){var unfilteredIndex=_.indexOf(repositories.list,cloneItem);if(unfilteredIndex!==-1){cloneItem.cloneState="complete";_.extend(repositories.list[unfilteredIndex],cloneItem);$scope.$apply(repositories.render);_.remove(repositories.cloningList,cloneItem);if(repositories.cloningList.length===0){sseAPIService.close(SSEObj)}$timeout(function(){return versionControlService.getRepositoryInformation(cloneItem.repository_root,"name,tasks").then(function(response){var repoDetails=extendRepositoryObject(response);_.extend(repositories.list[unfilteredIndex],clearCloning(repoDetails));alertService.removeById(taskID,"versionControl");repositories.render()},function(error){alertService.removeById(taskID,"versionControl");alertService.add({type:"danger",message:error.message,closeable:true,replace:false,group:"versionControl"})})},5e3)}}});$scope.$on("sse:task_failed",function(event,data){var taskID=data.task_id;var cloneItem=_.find(repositories.cloningList,function(o){return o.cloneTaskID===taskID});if(cloneItem){var unfilteredIndex=_.indexOf(repositories.list,cloneItem);_.remove(repositories.cloningList,cloneItem);if(repositories.cloningList.length===0){sseAPIService.close(SSEObj)}if(unfilteredIndex!==-1){repositories.list.splice(unfilteredIndex,1);alertService.add({type:"danger",message:LOCALE.maketext("Error occurred while cloning repository “[_1]”.",cloneItem.name),closeable:true,replace:false,group:"versionControl"});$scope.$apply(repositories.render)}}});$scope.$on("sse:ready",function(event){SSEObj=sseAPIService.connect(sseURL,events,config)});$scope.$on("$destroy",function(){if(SSEObj){sseAPIService.close(SSEObj)}});repositories.redirectToGitWeb=function(gitWebURL,repoName){if(gitWebURL){$window.open(gitWebURL,repoName+"GitWeb")}else{alertService.add({type:"danger",message:LOCALE.maketext("Unable to find repository web url"),closeable:true,replace:false,group:"versionControl"})}};repositories.redirectToFileManager=function(fileManagerURL,repoName){if(fileManagerURL){$window.open(fileManagerURL,repoName+"FileManager")}else{alertService.add({type:"danger",message:LOCALE.maketext("Unable to redirect to File Manager interface"),closeable:true,replace:false,group:"versionControl"})}};repositories.cloneToClipboard=function(cloneUrl){try{var result=versionControlService.cloneToClipboard(cloneUrl);if(result){alertService.add({type:"success",message:LOCALE.maketext("The system successfully copied the “[_1]” clone [output,acronym,URL,Uniform Resource Locator] to the clipboard.",cloneUrl),closeable:true,replace:false,autoClose:1e4,group:"versionControl"})}}catch(error){alertService.add({type:"danger",message:error,closeable:true,replace:false,group:"versionControl"})}};repositories.createRepository=function(){alertService.clear("","versionControl");$location.path("/create")};repositories.delete=function(repo){repo.removing=true;return versionControlService.deleteRepository(repo.repository_root).then(function(){table.remove(repo);repositories.render();alertService.add({type:"success",message:LOCALE.maketext("The system successfully deleted the “[_1]” repository in the “[_2]” directory.",repo.name,repo.repository_root),closeable:true,replace:false,autoClose:1e4,group:"versionControl"})},function(error){alertService.add({type:"danger",message:LOCALE.maketext("The system could not delete the “[_1]” repository in the “[_2]” directory.",repo.name,repo.repository_root),closeable:true,replace:false,group:"versionControl"});repo.removing=false;repo.delete_requested=false})};repositories.deleteText=function(repo){return LOCALE.maketext("Are you sure that you want to delete the “[_1]” repository?",repo.name)};repositories.manageRepository=function(repoPath){$location.path("/manage/"+encodeURIComponent(repoPath)+"/basic-info")};function getRepositoryIndex(repositoryRoot){return _.findIndex(repositories.filteredList,function(o){return o.repository_root===repositoryRoot})}repositories.getRepositoryDetails=function(repo,expandState){repo.detailsLoading=true;var index;if(expandState){return versionControlService.getRepositoryInformation(repo.repository_root,"name,clone_urls,branch,last_update,source_repository").then(function(response){index=getRepositoryIndex(repo.repository_root);if(index!==-1){response.detailsLoading=false;response.isExpanded=true;response.delete_requested=repo.delete_requested;_.assign(repo,response)}},function(error){alertService.add({type:"danger",message:error.message,closeable:true,replace:false,group:"versionControl"})})}else{repo.detailsLoading=false;repo.isExpanded=false}};repositories.init()}]);return controller});
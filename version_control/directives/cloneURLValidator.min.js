define(["angular","cjt/util/locale","cjt/validator/validator-utils","cjt/validator/ip-validators","cjt/validator/domain-validators","cjt/validator/validateDirectiveFactory"],function(angular,LOCALE,validationUtils,IP_VALIDATOR,DOMAIN_VALIDATOR){"use strict";var cloneURLValidator={validCloneUrl:function(cloneUrl){var result=validationUtils.initializeValidationResult();if(typeof cloneUrl==="undefined"||cloneUrl===null){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("You must specify a valid clone [asis,URL]."));return result}var storedParts=[];var scheme=parseUrlParts(cloneUrl.match(/^\S+:\/\//i));var userInfo=parseUrlParts(cloneUrl.match(/^\S+@/i));var ipv6Authority=parseUrlParts(cloneUrl.match(/^\[\S+\]/i));var authority=ipv6Authority===null?parseUrlParts(cloneUrl.split(/((:\d+\/)|(\/|:))/i)):null;parseUrlParts(cloneUrl.match(/^:\d+/i));var path=parseUrlParts(cloneUrl.match(/^\S+/i));function parseUrlParts(section){if(section!==null&&section.length>0){cloneUrl=cloneUrl.replace(section[0],"");storedParts.push(section[0]);return section[0]}return null}var protocolPattern=/^(?:git|ssh|https?)(?::\/\/)$/i;var hasValidProtocol=protocolPattern.test(scheme);var userAndPassPattern=/^\S+:\S+@/i;if(userAndPassPattern.test(userInfo)){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("The clone [asis,URL] [output,strong,cannot] include a password."));return result}var emailPattern=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@/i;var hasValidUser=emailPattern.test(userInfo);var preDomainValid=false;if(hasValidProtocol&&hasValidUser){preDomainValid=true}if(hasValidProtocol^hasValidUser){if(!hasValidProtocol&&scheme!==null){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("The provided clone [asis,URL] [output,strong,must] include a valid protocol."));return result}preDomainValid=true}if(!preDomainValid){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("Clone [asis,URL] [output,strong,must] include a valid protocol or username."));return result}if(ipv6Authority!==null){var ipv6AuthorityWithoutBrackets=ipv6Authority.replace(/(\[|\])/gi,"");var validIPV6=IP_VALIDATOR.methods.ipv6(ipv6AuthorityWithoutBrackets);if(!validIPV6.isValid){var errorMsg=combineErrorMessages(validIPV6.messages);result.isValid=false;result.add("cloneURLValidator",errorMsg);return result}}if(authority!==null&&authority!==""){var validIPV4=IP_VALIDATOR.methods.ipv4(authority);var validFQDN=DOMAIN_VALIDATOR.methods.fqdn(authority);if(!validIPV4.isValid&&!validFQDN.isValid){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("The clone [asis,URL] [output,strong,must] include a valid [asis,IP] address or a fully-qualified domain name."));return result}}else if(ipv6Authority===null){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("The clone [asis,URL] [output,strong,must] include a valid [asis,IP] address or a fully-qualified domain name."));return result}var scpSyntaxPattern=/^:/i;var hasSCPsyntaxPathStart=scpSyntaxPattern.test(path);if(hasValidProtocol&&hasValidUser&&hasSCPsyntaxPathStart){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("The repository path should [output,strong,not] begin with “:” if it includes the protocol."));return result}var pathAndExtensionPattern=/^(:|\/)\S*(\.git)?\/?/i;var hasValidPath=pathAndExtensionPattern.test(path);if(!hasValidPath){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("The path or port number is [output,strong,not] valid."));return result}if(cloneUrl!==""){result.isValid=false;result.add("cloneURLValidator",LOCALE.maketext("The clone [asis,URL] [output,strong,cannot] include whitespace characters."));return result}return result;function combineErrorMessages(msgArr){var msg="";for(var a=0,len=msgArr.length;a<len;a++){msg+=a!==len-1?msgArr[a].message+" ":msgArr[a].message}return msg}}};var validatorModule=angular.module("cjt2.validate");validatorModule.run(["validatorFactory",function(validatorFactory){validatorFactory.generate(cloneURLValidator)}]);return{methods:cloneURLValidator,name:"clone-url-validator",description:"Validation on git-based clone URLs.",version:1}});
(function(root) {
define("jquery-chosen", ["jquery"], function() {
  return (function() {
/*!
Chosen, a Select Box Enhancer for jQuery and Prototype
by Patrick Filler for Harvest, http://getharvest.com

Version 1.5.1
Full source at https://github.com/harvesthq/chosen
Copyright (c) 2011-2016 Harvest http://getharvest.com

MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
This file is generated by `grunt build`, do not edit it by hand.
*/

(function() {
  var $, AbstractChosen, Chosen, SelectParser, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SelectParser = (function() {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: this.escapeExpression(group.label),
        title: group.title ? group.title : void 0,
        children: 0,
        disabled: group.disabled,
        classes: group.className
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            title: option.title ? option.title : void 0,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            group_label: group_position != null ? this.parsed[group_position].label : null,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    SelectParser.prototype.escapeExpression = function(text) {
      var map, unsafe_chars;
      if ((text == null) || text === false) {
        return "";
      }
      if (!/[\&\<\>\"\'\`]/.test(text)) {
        return text;
      }
      map = {
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
      };
      unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
      return text.replace(unsafe_chars, function(chr) {
        return map[chr] || "&amp;";
      });
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  AbstractChosen = (function() {
    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.on_ready();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.group_search = this.options.group_search != null ? this.options.group_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      this.inherit_select_classes = this.options.inherit_select_classes || false;
      this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
      this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
      this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;
      return this.max_shown_results = this.options.max_shown_results || Number.POSITIVE_INFINITY;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
    };

    AbstractChosen.prototype.choice_label = function(item) {
      if (this.include_group_label_in_selected && (item.group_label != null)) {
        return "<b class='group-name'>" + item.group_label + "</b>" + item.html;
      } else {
        return item.html;
      }
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout((function() {
            return _this.container_mousedown();
          }), 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.results_option_build = function(options) {
      var content, data, data_content, shown_results, _i, _len, _ref;
      content = '';
      shown_results = 0;
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        data_content = '';
        if (data.group) {
          data_content = this.result_add_group(data);
        } else {
          data_content = this.result_add_option(data);
        }
        if (data_content !== '') {
          shown_results++;
          content += data_content;
        }
        if (options != null ? options.first : void 0) {
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.single_set_selected_text(this.choice_label(data));
          }
        }
        if (shown_results >= this.max_shown_results) {
          break;
        }
      }
      return content;
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, option_el;
      if (!option.search_match) {
        return '';
      }
      if (!this.include_option_in_results(option)) {
        return '';
      }
      classes = [];
      if (!option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("active-result");
      }
      if (option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("disabled-result");
      }
      if (option.selected) {
        classes.push("result-selected");
      }
      if (option.group_array_index != null) {
        classes.push("group-option");
      }
      if (option.classes !== "") {
        classes.push(option.classes);
      }
      option_el = document.createElement("li");
      option_el.className = classes.join(" ");
      option_el.style.cssText = option.style;
      option_el.setAttribute("data-option-array-index", option.array_index);
      option_el.innerHTML = option.search_text;
      if (option.title) {
        option_el.title = option.title;
      }
      return this.outerHTML(option_el);
    };

    AbstractChosen.prototype.result_add_group = function(group) {
      var classes, group_el;
      if (!(group.search_match || group.group_match)) {
        return '';
      }
      if (!(group.active_options > 0)) {
        return '';
      }
      classes = [];
      classes.push("group-result");
      if (group.classes) {
        classes.push(group.classes);
      }
      group_el = document.createElement("li");
      group_el.className = classes.join(" ");
      group_el.innerHTML = group.search_text;
      if (group.title) {
        group_el.title = group.title;
      }
      return this.outerHTML(group_el);
    };

    AbstractChosen.prototype.results_update_field = function() {
      this.set_default_text();
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.results_build();
      if (this.results_showing) {
        return this.winnow_results();
      }
    };

    AbstractChosen.prototype.reset_single_select_options = function() {
      var result, _i, _len, _ref, _results;
      _ref = this.results_data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        if (result.selected) {
          _results.push(result.selected = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.winnow_results = function() {
      var escapedSearchText, option, regex, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.get_search_text();
      escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      zregex = new RegExp(escapedSearchText, 'i');
      regex = this.get_search_regex(escapedSearchText);
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        option.search_match = false;
        results_group = null;
        if (this.include_option_in_results(option)) {
          if (option.group) {
            option.group_match = false;
            option.active_options = 0;
          }
          if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {
            results_group = this.results_data[option.group_array_index];
            if (results_group.active_options === 0 && results_group.search_match) {
              results += 1;
            }
            results_group.active_options += 1;
          }
          option.search_text = option.group ? option.label : option.html;
          if (!(option.group && !this.group_search)) {
            option.search_match = this.search_string_match(option.search_text, regex);
            if (option.search_match && !option.group) {
              results += 1;
            }
            if (option.search_match) {
              if (searchText.length) {
                startpos = option.search_text.search(zregex);
                text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
                option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              }
              if (results_group != null) {
                results_group.group_match = true;
              }
            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
              option.search_match = true;
            }
          }
        }
      }
      this.result_clear_highlight();
      if (results < 1 && searchText.length) {
        this.update_results_content("");
        return this.no_results(searchText);
      } else {
        this.update_results_content(this.results_option_build());
        return this.winnow_results_set_highlight();
      }
    };

    AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {
      var regex_anchor;
      regex_anchor = this.search_contains ? "" : "^";
      return new RegExp(regex_anchor + escaped_search_string, 'i');
    };

    AbstractChosen.prototype.search_string_match = function(search_string, regex) {
      var part, parts, _i, _len;
      if (regex.test(search_string)) {
        return true;
      } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
        parts = search_string.replace(/\[|\]/g, "").split(" ");
        if (parts.length) {
          for (_i = 0, _len = parts.length; _i < _len; _i++) {
            part = parts[_i];
            if (regex.test(part)) {
              return true;
            }
          }
        }
      }
    };

    AbstractChosen.prototype.choices_count = function() {
      var option, _i, _len, _ref;
      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      this.selected_option_count = 0;
      _ref = this.form_field.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };

    AbstractChosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (!(this.results_showing || this.is_disabled)) {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
        case 18:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.clipboard_event_checker = function(evt) {
      var _this = this;
      return setTimeout((function() {
        return _this.results_search();
      }), 50);
    };

    AbstractChosen.prototype.container_width = function() {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return "" + this.form_field.offsetWidth + "px";
      }
    };

    AbstractChosen.prototype.include_option_in_results = function(option) {
      if (this.is_multiple && (!this.display_selected_options && option.selected)) {
        return false;
      }
      if (!this.display_disabled_options && option.disabled) {
        return false;
      }
      if (option.empty) {
        return false;
      }
      return true;
    };

    AbstractChosen.prototype.search_results_touchstart = function(evt) {
      this.touch_started = true;
      return this.search_results_mouseover(evt);
    };

    AbstractChosen.prototype.search_results_touchmove = function(evt) {
      this.touch_started = false;
      return this.search_results_mouseout(evt);
    };

    AbstractChosen.prototype.search_results_touchend = function(evt) {
      if (this.touch_started) {
        return this.search_results_mouseup(evt);
      }
    };

    AbstractChosen.prototype.outerHTML = function(element) {
      var tmp;
      if (element.outerHTML) {
        return element.outerHTML;
      }
      tmp = document.createElement("div");
      tmp.appendChild(element);
      return tmp.innerHTML;
    };

    AbstractChosen.browser_is_supported = function() {
      if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
        return false;
      }
      if (/Android/i.test(window.navigator.userAgent)) {
        if (/Mobile/i.test(window.navigator.userAgent)) {
          return false;
        }
      }
      if (/IEMobile/i.test(window.navigator.userAgent)) {
        return false;
      }
      if (/Windows Phone/i.test(window.navigator.userAgent)) {
        return false;
      }
      if (/BlackBerry/i.test(window.navigator.userAgent)) {
        return false;
      }
      if (/BB10/i.test(window.navigator.userAgent)) {
        return false;
      }
      if (window.navigator.appName === "Microsoft Internet Explorer") {
        return document.documentMode >= 8;
      }
      return true;
    };

    AbstractChosen.default_multiple_text = "Select Some Options";

    AbstractChosen.default_single_text = "Select an Option";

    AbstractChosen.default_no_result_text = "No results match";

    return AbstractChosen;

  })();

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function(input_field) {
        var $this, chosen;
        $this = $(this);
        chosen = $this.data('chosen');
        if (options === 'destroy') {
          if (chosen instanceof Chosen) {
            chosen.destroy();
          }
          return;
        }
        if (!(chosen instanceof Chosen)) {
          $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {
    __extends(Chosen, _super);

    function Chosen() {
      _ref = Chosen.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl");
    };

    Chosen.prototype.set_up_html = function() {
      var container_classes, container_props;
      container_classes = ["chosen-container"];
      container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chosen-rtl");
      }
      container_props = {
        'class': container_classes.join(' '),
        'style': "width: " + (this.container_width()) + ";",
        'title': this.form_field.title
      };
      if (this.form_field.id.length) {
        container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
      }
      this.container = $("<div />", container_props);
      if (this.is_multiple) {
        this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>');
      } else {
        this.container.html('<a class="chosen-single chosen-default"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>');
      }
      this.form_field_jq.hide().after(this.container);
      this.dropdown = this.container.find('div.chosen-drop').first();
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chosen-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chosen-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chosen-search').first();
        this.selected_item = this.container.find('.chosen-single').first();
      }
      this.results_build();
      this.set_tab_index();
      return this.set_label_behavior();
    };

    Chosen.prototype.on_ready = function() {
      return this.form_field_jq.trigger("chosen:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.bind('touchstart.chosen', function(evt) {
        _this.container_mousedown(evt);
        return evt.preventDefault();
      });
      this.container.bind('touchend.chosen', function(evt) {
        _this.container_mouseup(evt);
        return evt.preventDefault();
      });
      this.container.bind('mousedown.chosen', function(evt) {
        _this.container_mousedown(evt);
      });
      this.container.bind('mouseup.chosen', function(evt) {
        _this.container_mouseup(evt);
      });
      this.container.bind('mouseenter.chosen', function(evt) {
        _this.mouse_enter(evt);
      });
      this.container.bind('mouseleave.chosen', function(evt) {
        _this.mouse_leave(evt);
      });
      this.search_results.bind('mouseup.chosen', function(evt) {
        _this.search_results_mouseup(evt);
      });
      this.search_results.bind('mouseover.chosen', function(evt) {
        _this.search_results_mouseover(evt);
      });
      this.search_results.bind('mouseout.chosen', function(evt) {
        _this.search_results_mouseout(evt);
      });
      this.search_results.bind('mousewheel.chosen DOMMouseScroll.chosen', function(evt) {
        _this.search_results_mousewheel(evt);
      });
      this.search_results.bind('touchstart.chosen', function(evt) {
        _this.search_results_touchstart(evt);
      });
      this.search_results.bind('touchmove.chosen', function(evt) {
        _this.search_results_touchmove(evt);
      });
      this.search_results.bind('touchend.chosen', function(evt) {
        _this.search_results_touchend(evt);
      });
      this.form_field_jq.bind("chosen:updated.chosen", function(evt) {
        _this.results_update_field(evt);
      });
      this.form_field_jq.bind("chosen:activate.chosen", function(evt) {
        _this.activate_field(evt);
      });
      this.form_field_jq.bind("chosen:open.chosen", function(evt) {
        _this.container_mousedown(evt);
      });
      this.form_field_jq.bind("chosen:close.chosen", function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind('blur.chosen', function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind('keyup.chosen', function(evt) {
        _this.keyup_checker(evt);
      });
      this.search_field.bind('keydown.chosen', function(evt) {
        _this.keydown_checker(evt);
      });
      this.search_field.bind('focus.chosen', function(evt) {
        _this.input_focus(evt);
      });
      this.search_field.bind('cut.chosen', function(evt) {
        _this.clipboard_event_checker(evt);
      });
      this.search_field.bind('paste.chosen', function(evt) {
        _this.clipboard_event_checker(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.bind('click.chosen', function(evt) {
          _this.choices_click(evt);
        });
      } else {
        return this.container.bind('click.chosen', function(evt) {
          evt.preventDefault();
        });
      }
    };

    Chosen.prototype.destroy = function() {
      $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
      if (this.search_field[0].tabIndex) {
        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
      }
      this.container.remove();
      this.form_field_jq.removeData('chosen');
      return this.form_field_jq.show();
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass('chosen-disabled');
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus.chosen", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chosen-disabled');
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus.chosen", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      if (!this.is_disabled) {
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(this.container[0].ownerDocument).bind('click.chosen', this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.search_results_mousewheel = function(evt) {
      var delta;
      if (evt.originalEvent) {
        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
      }
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === 'DOMMouseScroll') {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chosen-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chosen-container-active");
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      this.container.addClass("chosen-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      var active_container;
      active_container = $(evt.target).closest('.chosen-container');
      if (active_container.length && this.container[0] === active_container[0]) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      this.parsing = true;
      this.selected_option_count = null;
      this.results_data = SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        this.search_choices.find("li.search-choice").remove();
      } else if (!this.is_multiple) {
        this.single_set_selected_text();
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.search_field[0].readOnly = true;
          this.container.addClass("chosen-container-single-nosearch");
        } else {
          this.search_field[0].readOnly = false;
          this.container.removeClass("chosen-container-single-nosearch");
        }
      }
      this.update_results_content(this.results_option_build({
        first: true
      }));
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      return this.parsing = false;
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        this.form_field_jq.trigger("chosen:maxselected", {
          chosen: this
        });
        return false;
      }
      this.container.addClass("chosen-with-drop");
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      this.winnow_results();
      return this.form_field_jq.trigger("chosen:showing_dropdown", {
        chosen: this
      });
    };

    Chosen.prototype.update_results_content = function(content) {
      return this.search_results.html(content);
    };

    Chosen.prototype.results_hide = function() {
      if (this.results_showing) {
        this.result_clear_highlight();
        this.container.removeClass("chosen-with-drop");
        this.form_field_jq.trigger("chosen:hiding_dropdown", {
          chosen: this
        });
      }
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field.tabIndex) {
        ti = this.form_field.tabIndex;
        this.form_field.tabIndex = -1;
        return this.search_field[0].tabIndex = ti;
      }
    };

    Chosen.prototype.set_label_behavior = function() {
      var _this = this;
      this.form_field_label = this.form_field_jq.parents("label");
      if (!this.form_field_label.length && this.form_field.id.length) {
        this.form_field_label = $("label[for='" + this.form_field.id + "']");
      }
      if (this.form_field_label.length > 0) {
        return this.form_field_label.bind('click.chosen', function(evt) {
          if (_this.is_multiple) {
            return _this.container_mousedown(evt);
          } else {
            return _this.activate_field();
          }
        });
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice, close_link,
        _this = this;
      choice = $('<li />', {
        "class": "search-choice"
      }).html("<span>" + (this.choice_label(item)) + "</span>");
      if (item.disabled) {
        choice.addClass('search-choice-disabled');
      } else {
        close_link = $('<a />', {
          "class": 'search-choice-close',
          'data-option-array-index': item.array_index
        });
        close_link.bind('click.chosen', function(evt) {
          return _this.choice_destroy_link_click(evt);
        });
        choice.append(close_link);
      }
      return this.search_container.before(choice);
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy($(evt.target));
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
        this.show_search_field_default();
        if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
          this.results_hide();
        }
        link.parents('li').first().remove();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.reset_single_select_options();
      this.form_field.options[0].selected = true;
      this.single_set_selected_text();
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, item;
      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
          this.form_field_jq.trigger("chosen:maxselected", {
            chosen: this
          });
          return false;
        }
        if (this.is_multiple) {
          high.removeClass("active-result");
        } else {
          this.reset_single_select_options();
        }
        high.addClass("result-selected");
        item = this.results_data[high[0].getAttribute("data-option-array-index")];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        this.selected_option_count = null;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.single_set_selected_text(this.choice_label(item));
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.show_search_field_default();
        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
          this.form_field_jq.trigger("change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        evt.preventDefault();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.single_set_selected_text = function(text) {
      if (text == null) {
        text = this.default_text;
      }
      if (text === this.default_text) {
        this.selected_item.addClass("chosen-default");
      } else {
        this.single_deselect_control_build();
        this.selected_item.removeClass("chosen-default");
      }
      return this.selected_item.find("span").html(text);
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        this.selected_option_count = null;
        this.result_clear_highlight();
        if (this.results_showing) {
          this.winnow_results();
        }
        this.form_field_jq.trigger("change", {
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (!this.allow_single_deselect) {
        return;
      }
      if (!this.selected_item.find("abbr").length) {
        this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
      return this.selected_item.addClass("chosen-single-with-deselect");
    };

    Chosen.prototype.get_search_text = function() {
      return $('<div/>').text($.trim(this.search_field.val())).html();
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
      do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
      if (do_high != null) {
        return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;
      no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      no_results_html.find("span").first().html(terms);
      this.search_results.append(no_results_html);
      return this.form_field_jq.trigger("chosen:no_results", {
        chosen: this
      });
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var next_sib;
      if (this.results_showing && this.result_highlight) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          return this.result_do_highlight(next_sib);
        }
      } else {
        return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices_count() > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref1;
      stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          if (this.results_showing) {
            evt.preventDefault();
          }
          break;
        case 32:
          if (this.disable_search) {
            evt.preventDefault();
          }
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          evt.preventDefault();
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var div, f_width, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        f_width = this.container.outerWidth();
        if (w > f_width - 10) {
          w = f_width - 10;
        }
        return this.search_field.css({
          'width': w + 'px'
        });
      }
    };

    return Chosen;

  })(AbstractChosen);

}).call(this);


  }).apply(root, arguments);
});
}(this));

(function(root) {
define("angular-chosen", ["angular","jquery-chosen"], function() {
  return (function() {
/**
 * angular-chosen-localytics - Angular Chosen directive is an AngularJS Directive that brings the Chosen jQuery in a Angular way
 * @version v1.3.0
 * @link http://github.com/leocaseiro/angular-chosen
 * @license MIT
 */
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('localytics.directives', []);

  angular.module('localytics.directives').directive('chosen', [
    '$timeout', function($timeout) {
      var CHOSEN_OPTION_WHITELIST, NG_OPTIONS_REGEXP, isEmpty, snakeCase;
      NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
      CHOSEN_OPTION_WHITELIST = ['persistentCreateOption', 'createOptionText', 'createOption', 'skipNoResults', 'noResultsText', 'allowSingleDeselect', 'disableSearchThreshold', 'disableSearch', 'enableSplitWordSearch', 'inheritSelectClasses', 'maxSelectedOptions', 'placeholderTextMultiple', 'placeholderTextSingle', 'searchContains', 'singleBackstrokeDelete', 'displayDisabledOptions', 'displaySelectedOptions', 'width', 'includeGroupLabelInSelected', 'maxShownResults'];
      snakeCase = function(input) {
        return input.replace(/[A-Z]/g, function($1) {
          return "_" + ($1.toLowerCase());
        });
      };
      isEmpty = function(value) {
        var key;
        if (angular.isArray(value)) {
          return value.length === 0;
        } else if (angular.isObject(value)) {
          for (key in value) {
            if (value.hasOwnProperty(key)) {
              return false;
            }
          }
        }
        return true;
      };
      return {
        restrict: 'A',
        require: '?ngModel',
        priority: 1,
        link: function(scope, element, attr, ngModel) {
          var chosen, empty, initOrUpdate, match, options, origRender, startLoading, stopLoading, updateMessage, valuesExpr, viewWatch;
          scope.disabledValuesHistory = scope.disabledValuesHistory ? scope.disabledValuesHistory : [];
          element = $(element);
          element.addClass('localytics-chosen');
          options = scope.$eval(attr.chosen) || {};
          angular.forEach(attr, function(value, key) {
            if (indexOf.call(CHOSEN_OPTION_WHITELIST, key) >= 0) {
              return attr.$observe(key, function(value) {
                options[snakeCase(key)] = String(element.attr(attr.$attr[key])).slice(0, 2) === '{{' ? value : scope.$eval(value);
                return updateMessage();
              });
            }
          });
          startLoading = function() {
            return element.addClass('loading').attr('disabled', true).trigger('chosen:updated');
          };
          stopLoading = function() {
            element.removeClass('loading');
            if (angular.isDefined(attr.disabled)) {
              element.attr('disabled', attr.disabled);
            } else {
              element.attr('disabled', false);
            }
            return element.trigger('chosen:updated');
          };
          chosen = null;
          empty = false;
          initOrUpdate = function() {
            var defaultText;
            if (chosen) {
              return element.trigger('chosen:updated');
            } else {
              $timeout(function() {
                chosen = element.chosen(options).data('chosen');
              });
              if (angular.isObject(chosen)) {
                return defaultText = chosen.default_text;
              }
            }
          };
          updateMessage = function() {
            if (empty) {
              element.attr('data-placeholder', chosen.results_none_found).attr('disabled', true);
            } else {
              element.removeAttr('data-placeholder');
            }
            return element.trigger('chosen:updated');
          };
          if (ngModel) {
            origRender = ngModel.$render;
            ngModel.$render = function() {
              origRender();
              return initOrUpdate();
            };
            element.on('chosen:hiding_dropdown', function() {
              return scope.$apply(function() {
                return ngModel.$setTouched();
              });
            });
            if (attr.multiple) {
              viewWatch = function() {
                return ngModel.$viewValue;
              };
              scope.$watch(viewWatch, ngModel.$render, true);
            }
          } else {
            initOrUpdate();
          }
          attr.$observe('disabled', function() {
            return element.trigger('chosen:updated');
          });
          if (attr.ngOptions && ngModel) {
            match = attr.ngOptions.match(NG_OPTIONS_REGEXP);
            valuesExpr = match[7];
            scope.$watchCollection(valuesExpr, function(newVal, oldVal) {
              var timer;
              return timer = $timeout(function() {
                if (angular.isUndefined(newVal)) {
                  return startLoading();
                } else {
                  empty = isEmpty(newVal);
                  stopLoading();
                  return updateMessage();
                }
              });
            });
            return scope.$on('$destroy', function(event) {
              if (typeof timer !== "undefined" && timer !== null) {
                return $timeout.cancel(timer);
              }
            });
          }
        }
      };
    }
  ]);

}).call(this);


  }).apply(root, arguments);
});
}(this));

/*
# base/frontend/paper_lantern/mail/pops/services/emailAccountService.js    Copyright 2017 cPanel, Inc.
#                                                                                 All rights Reserved.
# copyright@cpanel.net                                                               http://cpanel.net
# This code is subject to the cPanel license.                       Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/services/emailAccountsService',[

        // Libraries
        "angular",
        "cjt/io/uapi",
        "cjt/io/uapi-request",
        "cjt/util/locale"
    ],
    function(angular, API, APIREQUEST, LOCALE) { // eslint-disable-line no-unused-vars
        var HTML_INFINITY = "&infin;";

        var app;
        try {
            app = angular.module("cpanel.mail.Pops"); // For runtime
        } catch (e) {
            app = angular.module("cpanel.mail.Pops", []); // Fall-back for unit testing
        }

        app.factory("emailAccountsService", ["$q", "APIService",
            function($q, APIService) {

                // Set the default success transform on the prototype
                var servicePrototype = new APIService({
                    transformAPISuccess: function(response) {
                        return response.data;
                    }
                });

                var EmailAccountsService = function() {};
                EmailAccountsService.prototype = servicePrototype;

                angular.extend(EmailAccountsService.prototype, {
                    _dataWrapper: function(apiCall) {
                        return this.deferred(apiCall).promise;
                    },

                    /**
                     * Adds an email account
                     * @method addEmailAccount
                     * @param {Object} emailAccount The email account to add
                     * @return {Promise} Returns a promise that resolves to a string with account+domain
                     */
                    addEmailAccount: function(emailAccount) {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", "add_pop", emailAccount);
                        apiCall.addAnalytics();
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Gets whether or not the shared address book is enabled
                     * @method isSharedAddressBookEnabled
                     * @return {Promise} Returns a promise that resolves to a boolean indicating whether or not the shared AB is enabled
                     */
                    isSharedAddressBookEnabled: function() {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("DAV", "has_shared_global_addressbook");
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Enables the shared address book
                     * @method enableSharedAddressBook
                     * @return {Promise} Returns a promise that resolves to a boolean indicating whether or not the shared AB is enabled
                     */
                    enableSharedAddressBook: function() {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("DAV", "enable_shared_global_addressbook");
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Disables the shared address book
                     * @method disableSharedAddressBook
                     * @return {Promise} Returns a promise that resolves to a boolean indicating whether or not the shared AB is enabled
                     */
                    disableSharedAddressBook: function() {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("DAV", "disable_shared_global_addressbook");
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Changes the password for an email account
                     * @method changePassword
                     * @param  {String} email    A string indicating which email account to change the password for
                     * @param  {String} domain   A string indicating which domain to change the password for
                     * @param  {String} password A string indicating the new password
                     * @return {Promise}         Returns a promise that resolves with no data on success
                     */
                    changePassword: function(email, domain, password) {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", "passwd_pop", {
                            email: email,
                            domain: domain,
                            password: password
                        });
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Changes the quota for an email account
                     * @method changeQuota
                     * @param  {String}  email    A string indicating which email account to change the quota for
                     * @param  {String}  domain   A string indicating which domain to change the quota for
                     * @param  {Integer} quota    An integer specifying the new quota in MB
                     * @return {Promise}          Returns a promise that resolves with no data on success
                     */
                    changeQuota: function(email, domain, quota) {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", "edit_pop_quota", {
                            email: email,
                            domain: domain,
                            quota: quota
                        });
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Deletes an email account
                     * @method deleteEmailAccount
                     * @param  {String}  email    A string indicating which email account to delete
                     * @param  {String}  domain   A string indicating which domain to delete
                     * @return {Promise}          Returns a promise that resolves with no data on success
                     */
                    deleteEmailAccount: function(email, domain) {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", "delete_pop", { email: email, domain: domain });
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Gets the list of email accounts
                     * @method getEmailAccounts
                     * @param  {Object}  apiParams An object providing the UAPI filter, paginate, and sort properties
                     * @return {Promise}           Returns a promise that resolves to the list of email accounts
                     */
                    getEmailAccounts: function(apiParams) {

                        if ( this.currentGetRequest && this.currentGetRequest.jqXHR ) {
                            this.currentGetRequest.jqXHR.abort();
                        }

                        var apiCall = new APIREQUEST.Class();

                        // We always format the data on the frontend so avoid doing it on the backend for non-displayed data
                        if (!apiParams) {
                            apiParams = {};
                        }
                        apiParams.no_human_readable_keys = 1;
                        apiParams.get_restrictions = 1;
                        apiCall.initialize("Email", "list_pops_with_disk", apiParams);

                        var deferred = $q.defer();
                        var service = this;

                        // We want to be able to access the underlying jQuery XHR object here so that we can
                        // .abort() any in flight calls to list_pops_with_disk when a new one is submitted.
                        this.currentGetRequest = new APIService.AngularAPICall(apiCall, {
                            done: function(response) {

                                service.currentGetRequest = undefined;

                                if ( response.parsedResponse.error ) {
                                    deferred.reject(response.parsedResponse.error);
                                } else {

                                    var result = response.parsedResponse;

                                    var rdata = result.data;
                                    for (var rd = 0; rd < rdata.length; rd++) {
                                        var emailAccount = rdata[rd];

                                        emailAccount.diskused = parseInt(emailAccount.diskused, 10);
                                        emailAccount.humandiskused = LOCALE.format_bytes( emailAccount._diskused );

                                        if (emailAccount._diskquota === 0 || emailAccount.diskquota === 0 || emailAccount.diskquota === "unlimited") {
                                            emailAccount.diskquota = 0;
                                            emailAccount.humandiskquota = HTML_INFINITY;
                                            emailAccount.diskusedpercent = 0;
                                        } else {
                                            emailAccount.diskquota = parseInt(emailAccount._diskquota, 10) / 1024 / 1024;
                                            emailAccount.humandiskquota = LOCALE.format_bytes(emailAccount._diskquota);
                                            emailAccount.diskusedpercent = ((emailAccount._diskused / emailAccount._diskquota) * 100).toFixed(2);
                                        }

                                        emailAccount.humandiskusedpercent = LOCALE.numf(emailAccount.diskusedpercent) + "%";
                                        emailAccount.suspended_login = ("" + emailAccount.suspended_login) === "1";
                                        emailAccount.suspended_incoming = ("" + emailAccount.suspended_incoming) === "1";
                                        emailAccount.suspended_outgoing = ("" + emailAccount.suspended_outgoing) === "1";
                                        emailAccount.hold_outgoing = ("" + emailAccount.hold_outgoing) === "1";
                                        emailAccount.has_suspended = ("" + emailAccount.has_suspended) === "1";

                                    }

                                    deferred.resolve(result);
                                }

                            },
                            fail: function() {
                                service.currentGetRequest = undefined;
                            }
                        });

                        return deferred.promise;
                    },

                    /**
                     * Gets the usage for the default email account
                     * @method getDefaultAccountUsage
                     * @return {Promise} Returns a promise that resolves to a pretty formatted string indicating the default account's disk usage
                     */
                    getDefaultAccountUsage: function() {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", "get_main_account_disk_usage");
                        return this._dataWrapper(apiCall);
                    },

                    _createAPICall: function(method, email, messages) {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", method, { email: email });
                        return this._dataWrapper(apiCall).then(
                            function() {
                                return messages.success ? { method: method, type: "success", message: LOCALE.makevar(messages.success, email), autoClose: 10000 } : { method: method, type: "success" };
                            },
                            function(error) {
                                return messages.error ? { method: method, type: "danger", message: LOCALE.makevar(messages.error, email, error) } : { method: method, type: "danger" };
                            }
                        );
                    },

                    /**
                     * Gets the number of currently held messages in the mail queue for the specified email account
                     * @method getHeldMessageCount
                     * @param {Object} emailAccount The email account to get the held message count for
                     * @return {Promise} Returns a promise that resolves to an integer count of the number of held messages
                     */
                    getHeldMessageCount: function(email) {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", "get_held_message_count", {
                            email: email
                        });
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Deletes any held messages in the mail queue for the specified email account
                     * @method deleteHeldMessages
                     * @param {Object} emailAccount The email account to delete the held messages for
                     * @return {Promise} Returns a promise that resolves to an integer count of the number of deleted messages
                     */
                    deleteHeldMessages: function(email, releaseAfterDelete) {
                        var apiCall = new APIREQUEST.Class();
                        apiCall.initialize("Email", "delete_held_messages", {
                            email: email,
                            release_after_delete: releaseAfterDelete
                        });
                        return this._dataWrapper(apiCall);
                    },

                    /**
                     * Adjusts the login/incoming/outgoing suspensions for the specified email account
                     * @method changeSuspensions
                     * @param {Object} emailAccount The email account to set suspensions on
                     * @param {Object} suspensions The suspensions to apply to the email account
                     *   @param {Boolean} login True if logins should be suspended, false otherwise
                     *   @param {Boolean} incoming True if incoming mail should be suspended, false otherwise
                     *   @param {String} outgoing “suspend” if outgoing mail should be suspended, “hold” if outgoing mail should be held, any other value otherwise
                     * @return {Promise} Returns a promise that will resolve to an array of objects suitable for passing to AlertService
                     */
                    changeSuspensions: function(emailAccount, suspensions) {

                        var calls = [];

                        if ( emailAccount.suspended_login && !suspensions.login ) {

                            // Unsuspend login
                            calls.push(this._createAPICall(
                                "unsuspend_login",
                                emailAccount.email,
                                {
                                    success: LOCALE.translatable("You have removed the suspension on “[_1]” from logging in."),
                                    error: LOCALE.translatable("Failed to remove the suspension on “[_1]” from logging in: [_2]")
                                }
                            ));
                        } else if ( !emailAccount.suspended_login && suspensions.login ) {

                            // Suspend login
                            calls.push(this._createAPICall(
                                "suspend_login",
                                emailAccount.email,
                                {
                                    success: LOCALE.translatable("You have suspended “[_1]” from logging in."),
                                    error: LOCALE.translatable("Failed to suspend “[_1]” from logging in: [_2]")
                                }
                            ));
                        }

                        if ( emailAccount.suspended_incoming && !suspensions.incoming ) {

                            // Unsuspend incoming
                            calls.push(this._createAPICall(
                                "unsuspend_incoming",
                                emailAccount.email,
                                {
                                    success: LOCALE.translatable("You have removed the suspension on “[_1]” from receiving mail."),
                                    error: LOCALE.translatable("Failed to remove the suspension on “[_1]” from receiving mail: [_2]")
                                }
                            ));
                        } else if ( !emailAccount.suspended_incoming && suspensions.incoming ) {

                            // Suspend incoming
                            calls.push(this._createAPICall(
                                "suspend_incoming",
                                emailAccount.email,
                                {
                                    success: LOCALE.translatable("You have suspended “[_1]” from receiving mail."),
                                    error: LOCALE.translatable("Failed to suspend “[_1]” from receiving mail: [_2]")
                                }
                            ));
                        }

                        if ( emailAccount.suspended_outgoing && suspensions.outgoing !== "suspend" ) {

                            // Unsuspend outgoing
                            calls.push(this._createAPICall(
                                "unsuspend_outgoing",
                                emailAccount.email,
                                {
                                    success: suspensions.outgoing === "hold" ? undefined : LOCALE.translatable("You have removed the suspension on “[_1]” from sending mail."),
                                    error: LOCALE.translatable("Failed to remove the suspension on “[_1]” from sending mail: [_2]")
                                }
                            ));
                        } else if ( !emailAccount.suspended_outgoing && suspensions.outgoing === "suspend" ) {

                            // Suspend outgoing
                            calls.push(this._createAPICall(
                                "suspend_outgoing",
                                emailAccount.email,
                                {
                                    success: LOCALE.translatable("You have suspended “[_1]” from sending mail."),
                                    error: LOCALE.translatable("Failed to suspend “[_1]” from sending mail: [_2]")
                                }
                            ));
                        }

                        if ( emailAccount.hold_outgoing && suspensions.outgoing !== "hold" ) {

                            // Release outgoing
                            calls.push(this._createAPICall(
                                "release_outgoing",
                                emailAccount.email,
                                {
                                    success: suspensions.outgoing === "suspend" ? undefined : LOCALE.translatable("You have released outgoing mail for “[_1]”."),
                                    error: LOCALE.translatable("Failed to release outgoing mail for “[_1]”: [_2]")
                                }
                            ));
                        } else if ( !emailAccount.hold_outgoing && suspensions.outgoing === "hold" ) {

                            // Hold outgoing
                            calls.push(this._createAPICall(
                                "hold_outgoing",
                                emailAccount.email,
                                {
                                    success: LOCALE.translatable("You have held “[_1]”’s outgoing mail in the mail queue."),
                                    error: LOCALE.translatable("Failed to hold “[_1]”’s outgoing mail in the mail queue: [_2]")
                                }
                            ));
                        }

                        if ( calls.length > 0 ) {
                            return $q.all(calls);
                        } else {
                            return $q(function(resolve) {
                                resolve([]);
                            });
                        }

                    },

                });

                return new EmailAccountsService();
            }
        ]);

    }
);

/*
# base/frontend/paper_lantern/mail/pops/filters/emailLocaleString.js Copyright(c) 2017 cPanel, Inc.
#                                                                              All rights Reserved.
# copyright@cpanel.net                                                            http://cpanel.net
# This code is subject to the cPanel license.                    Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/filters/emailLocaleString',[
        "angular",
        "cjt/util/locale"
    ],
    function(angular, LOCALE) {

        /**
         * Filter that accepts an email address and a locale string and returns the localized text
         * @param {String} email        The email address to inject into the locale string
         * @param {String} localeString The locale string to inject the email address into
         *
         * @example
         * <a class="btn btn-link" title="{{ emailAccount.email | emailLocaleString:'Change password for “[_1]”'">
         *
         * NOTE: The locale string passed to this filter must be defined in a maketext string. ## no extract maketext
         */

        var module;

        try {
            module = angular.module("cpanel.mail.Pops");
        } catch (e) {
            module = angular.module("cpanel.mail.Pops", []);
        }

        module.filter("emailLocaleString", function() {
            return function(email, localeString) {
                return LOCALE.makevar(localeString, email);
            };
        });

    }
);

/*
# base/frontend/paper_lantern/mail/pops/filters/encodeURIComponent.js Copyright(c) 2017 cPanel, Inc.
#                                                                               All rights Reserved.
# copyright@cpanel.net                                                             http://cpanel.net
# This code is subject to the cPanel license.                     Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/filters/encodeURIComponent',[
        "angular",
    ],
    function(angular) {

        /**
         * A filter to provide a wrapper around window.encodeURIComponent for use in Angular markup, mostly useful for building links
         * @param  {String} value The value to provide to encodeURIComponent
         * @return {String}       Returns the value filtered through window.encodeURIComponent
         *
         * @example
         * <a href="../some/page.html#/{{ someValue | encodeURIComponent }}" target="_blank">
         */

        var module;
        try {
            module = angular.module("cpanel.mail.Pops");
        } catch (e) {
            module = angular.module("cpanel.mail.Pops", []);
        }

        module.filter("encodeURIComponent", function() {
            return window.encodeURIComponent;
        });

    }
);

/*
# base/frontend/paper_lantern/mail/pops/filters/quotaProgressType.js Copyright(c) 2017 cPanel, Inc.
#                                                                              All rights Reserved.
# copyright@cpanel.net                                                            http://cpanel.net
# This code is subject to the cPanel license.                    Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/filters/quotaProgressType',[
        "angular"
    ],
    function() {

        /**
         * Filter that returns the progress bar class to use based on the percentage used
         * @param {Integer} displayPercentage The percentage (0-100) to check
         * @return {String}                   Returns a string indicating the class name to apply to the progress bar
         *
         * @example
         * <uib-progressbar type="{{ emailAccount.diskusedpercent | quotaProgressType }}" value="emailAccount.diskusedpercent"></uib-progressbar>
         */

        var module;
        try {
            module = angular.module("cpanel.mail.Pops");
        } catch (e) {
            module = angular.module("cpanel.mail.Pops", []);
        }

        module.filter("quotaProgressType", function() {
            return function(displayPercentage) {
                if (displayPercentage >= 80) {
                    return "danger";
                } else if (displayPercentage >= 60) {
                    return "warning";
                } else if (displayPercentage >= 40) {
                    return "info";
                } else {
                    return "success";
                }
            };
        });

    }
);

/*
# base/frontend/paper_lantern/mail/pops/views/listEmailAccounts.js Copyright(c) 2018 cPanel, Inc.
#                                                                            All rights Reserved.
# copyright@cpanel.net                                                          http://cpanel.net
# This code is subject to the cPanel license.                  Unauthorized copying is prohibited
*/

/* global define: false, PAGE: false */

/* ----------------------------------------------------------------------
NOTE: The search term is preserved in localStorage. The value is prefixed
with `${PAGE.securityToken}:` so that we can expire the value between
sessions. This might make useful logic to put into a reusable module later.
----------------------------------------------------------------------*/

define(
    'app/views/listEmailAccounts',[
        "lodash",
        "angular",
        "cjt/util/locale",
        "uiBootstrap",
        "cjt/directives/actionButtonDirective",
        "cjt/directives/loadingPanel",
        "cjt/directives/toggleSortDirective",
        "cjt/directives/searchDirective",
        "cjt/directives/pageSizeDirective",
        "cjt/filters/startFromFilter",
        "cjt/decorators/paginationDecorator",
        "cjt/services/cpanel/componentSettingSaverService",
        "cjt/services/alertService"
    ],
    function(_, angular, LOCALE) {
        "use strict";

        var HTML_INFINITY = "&infin;";

        var app;
        try {
            app = angular.module("cpanel.mail.Pops");
        } catch (e) {
            app = angular.module("cpanel.mail.Pops", []);
        }

        app.controller("listEmailAccountsCtrl",
            [
                "$rootScope",
                "$scope",
                "$timeout",
                "$location",
                "emailAccountsService",
                "growl",
                "$routeParams",
                "$window",
                "componentSettingSaverService",
                "ONE_MEBIBYTE",
                "alertService",
                function(
                    $rootScope,
                    $scope,
                    $timeout,
                    $location,
                    emailAccountsService,
                    growl,
                    $routeParams,
                    $window,
                    componentSettingSaverService,
                    ONE_MEBIBYTE,
                    alertService
                ) {

                    var COMPONENT_NAME = "EmailAccountsTable";
                    var STORAGE_KEY    = "EmailAccountsListFilter";

                    $scope.requiredPasswordStrength = PAGE.requiredPasswordStrength;
                    $scope.webmailEnabled = PAGE.webmailEnabled;
                    $scope.externalAuthConfig = PAGE.externalAuthModulesConfigured;
                    $scope.showCalAndContacts = PAGE.showCalendarAndContactItems;
                    $scope.emailDiskUsageEnabled = PAGE.emailDiskUsageEnabled;
                    $scope.defaultQuota = PAGE.userDefinedQuotaDefaultValue;
                    $scope.maxQuota = PAGE.maxEmailQuota;
                    $scope.expandedAccount = undefined;
                    $scope.loadingEmailAccounts = false;
                    $scope.filterTermPending = true;
                    $scope.tableStatus = undefined;
                    $scope.isRTL = PAGE.isRTL;
                    $scope.storageKey = STORAGE_KEY;
                    $scope.canSetUnlimited = PAGE.canSetUnlimited !== undefined ? PAGE.canSetUnlimited : true;

                    $scope.actionModule = undefined;

                    $scope.passwordChange = {
                        password: undefined,
                        confirm: undefined
                    };

                    $scope.changingPassword = false;

                    $scope.quotaChange = {
                        quotaType: undefined,
                        quota: undefined
                    };

                    $scope.changingQuota = false;

                    if (!$rootScope.meta) {
                        $rootScope.meta = {

                            // sort settings
                            sortReverse: false,
                            sortBy: "user",
                            sortDirection: "asc",
                            sortFields: ["user", "domain", "has_suspended", "_diskused", "_diskquota", "diskusedpercent_float"],

                            // search settings
                            filterValue: "",

                            // pager settings
                            showPager: false,
                            maxPages: 5,
                            totalItems: 0,
                            currentPage: 1,
                            pageSize: 20,
                            pageSizes: [20, 50, 100, 500],
                            start: 0,
                            limit: 10
                        };
                    }

                    $scope.connectDevicesIcon = $scope.showCalAndContacts ? "fa-mobile-alt" : "fa-external-link-alt";

                    /**
                     * Sets the sort, paginiation, and filter settings based on the provided object
                     * @method setMetaFromComponentSettings
                     * @param  {Object} settings An object containing the settings
                     *  {
                     *      sortBy:        A string indicating which field to sort by, must be one of the values in $scope.meta.sortFields
                     *      sortDirection: A string indicating the sort direction, must be one of "asc" or "desc"
                     *      pageSize:      A string or integer indicating the page size, must be one of the values in $scope.meta.pageSizes
                     *      filterValue:   A string indicating the value for the search/filter input
                     *  }
                     */
                    $scope.setMetaFromComponentSettings = function(settings) {

                        if ( settings.hasOwnProperty("sortBy") && settings.sortBy && _.find($rootScope.meta.sortFields, function(f) {
                            return f === settings.sortBy;
                        }) ) {
                            $rootScope.meta.sortBy = settings.sortBy;
                        }

                        if ( settings.hasOwnProperty("sortDirection") && settings.sortDirection && (settings.sortDirection === "asc" || settings.sortDirection === "desc" ) ) {
                            $rootScope.meta.sortDirection = settings.sortDirection;
                        }

                        if ( settings.hasOwnProperty("pageSize") && settings.pageSize && _.find($rootScope.meta.pageSizes, function(s) {
                            return s === parseInt(settings.pageSize);
                        }) ) {
                            $rootScope.meta.pageSize = parseInt(settings.pageSize);
                        }

                    };

                    /**
                     * Stores the current values of sortBy, sortDirection, pageSize, and filterValue in the component settings
                     * @method saveMetaToComponentSettings
                     */
                    $scope.saveMetaToComponentSettings = function() {
                        componentSettingSaverService.set(COMPONENT_NAME, {
                            sortBy: $rootScope.meta.sortBy,
                            sortDirection: $rootScope.meta.sortDirection,
                            pageSize: $rootScope.meta.pageSize
                        });
                    };

                    $scope.clearTableStatus = function() {
                        $scope.tableStatus = undefined;
                    };

                    $scope.clearStatus = function(emailAccount) {

                        if ( emailAccount && $scope.expandedAccount === emailAccount ) {
                            alertService.clear(undefined, "alertGroup" + $rootScope.meta.accounts.indexOf(emailAccount));
                        }

                        // Account was deleted, remove it from the list
                        if ( emailAccount && emailAccount.deleted ) {

                            var index = $rootScope.meta.accounts.indexOf(emailAccount);

                            // Don't remove anything if the item isn't found in the list
                            if ( index > -1 ) {
                                $rootScope.meta.accounts.splice(index, 1);
                            }

                            if ( emailAccount === $scope.expandedAccount ) {
                                $scope.expandedAccount = undefined;
                            }

                            // If we've removed all the items on the page, but there are more items in the result set, fetch them
                            if ( $rootScope.meta.accounts.length === 0 && $rootScope.meta.totalItems > $rootScope.meta.pageSize ) {

                                // If we deleted the last item on the last page, go back by 1 page
                                if ( $rootScope.meta.currentPage === $rootScope.meta.totalPages ) {
                                    $rootScope.meta.currentPage--;
                                }

                                $scope.fetch();
                            }

                        }

                    };

                    $scope.onModuleOpened = function(index) {

                        var moduleContainer = angular.element("#dt_module_row_" + index);
                        if ( !moduleContainer || moduleContainer.length !== 1 ) {
                            return;
                        }

                        moduleContainer = moduleContainer[0];
                        var position = moduleContainer.getBoundingClientRect().top;
                        var moduleHeight = moduleContainer.getBoundingClientRect().height;

                        var bottom = position + moduleHeight;

                        if ( bottom > $window.innerHeight ) {
                            var body = angular.element("body");
                            body.animate({
                                scrollTop: (body[0].scrollTop + (bottom - $window.innerHeight))
                            });
                        }

                    };

                    /**
                     * Generic click handler for the cancel links in action modules
                     * @method cancelAction
                     */
                    $scope.cancelAction = function() {
                        $scope.expandedAccount = undefined;
                        $scope.actionModule = undefined;
                    };

                    /**
                     * Click handler for the password link, opens the change password module for the account
                     * @method onClickPassword
                     * @param  {Object} emailAccount The email account to open the change password module for
                     */
                    $scope.onClickPassword = function(emailAccount) {

                        $scope.passwordChange = {};

                        if ( $scope.expandedAccount === emailAccount && $scope.actionModule === "password" ) {
                            $scope.cancelAction();
                        } else {
                            $scope.clearStatus($scope.expandedAccount);
                            $scope.actionModule = "password";
                            $scope.expandedAccount = emailAccount;

                            $timeout(function() {
                                $scope.onModuleOpened($rootScope.meta.accounts.indexOf(emailAccount));
                            }, 350);
                        }

                    };

                    /**
                     * Click handler for the change password button, submits the new password to emailAccountsService.changePassword
                     * @method onClickChangePassword
                     */
                    $scope.onClickChangePassword = function() {

                        $scope.changingPassword = true;
                        $scope.clearStatus($scope.expandedAccount);

                        return emailAccountsService.changePassword($scope.expandedAccount.user, $scope.expandedAccount.domain, $scope.passwordChange.password).then(
                            function() {

                                alertService.add({
                                    message: LOCALE.maketext("Password for “[_1]” has been changed.", $scope.expandedAccount.user + "@" + $scope.expandedAccount.domain),
                                    type: "success",
                                    closeable: true,
                                    autoClose: 10000,
                                    group: "alertGroup" + $rootScope.meta.accounts.indexOf($scope.expandedAccount)
                                });

                                $scope.changingPassword = false;
                                $scope.passwordChange = {};
                                $scope.actionModule = undefined;
                            },
                            function(error) {
                                alertService.add({
                                    type: "danger",
                                    message: error,
                                    closeable: true,
                                    group: "alertGroup" + $rootScope.meta.accounts.indexOf($scope.expandedAccount)
                                });
                                $scope.changingPassword = false;
                            }
                        );

                    };

                    /**
                     * Click handler for the quota link, opens the change quota module for the account
                     * @method onClickQuota
                     * @param  {Object} emailAccount The email account to open the change quota module for
                     */
                    $scope.onClickQuota = function(emailAccount) {
                        if ( $scope.expandedAccount === emailAccount && $scope.actionModule === "quota" ) {
                            $scope.cancelAction();
                        } else {

                            $scope.clearStatus($scope.expandedAccount);

                            $scope.actionModule = "quota";
                            $scope.expandedAccount = emailAccount;

                            if ( !emailAccount._diskquota || emailAccount._diskquota === 0 ) {
                                $scope.quotaChange.quotaType = "unlimited";
                                $scope.quotaChange.quota = $scope.defaultQuota;
                            } else {
                                $scope.quotaChange.quotaType = "userdefined";
                                $scope.quotaChange.quota = emailAccount.diskquota;
                            }

                            $timeout(function() {
                                $scope.onModuleOpened($rootScope.meta.accounts.indexOf(emailAccount));
                            }, 350);
                        }
                    };

                    /**
                     * Click handler for the save button on the change quota module, submits the new quota to emailAccountsService.changeQuota
                     * @method onClickChangeQuota
                     */
                    $scope.onClickChangeQuota = function() {

                        // Debounce by 250ms just in case they hit enter really fast after changing the value
                        $timeout(function() {

                            var emailAccount = $scope.expandedAccount;
                            var quotaValue;

                            if ( $scope.quotaChange.quotaType === "unlimited" ) {
                                quotaValue = $scope.canSetUnlimited ? 0 : $scope.maxQuota;
                            } else {
                                quotaValue = parseInt($scope.quotaChange.quota);
                            }

                            if ( quotaValue === undefined || isNaN(quotaValue) ) {
                                return;
                            }

                            $scope.changingQuota = true;
                            $scope.clearStatus($scope.expandedAccount);

                            return emailAccountsService.changeQuota(emailAccount.user, emailAccount.domain, quotaValue).then(
                                function() {

                                    $scope.changingQuota = false;

                                    var statusText;

                                    if ( quotaValue === 0 ) {
                                        statusText = LOCALE.maketext("Changed Quota for “[_1]” to unlimited.", emailAccount.user + "@" + emailAccount.domain);
                                    } else {
                                        statusText = LOCALE.maketext("“[_1]”‘s quota is now [format_bytes,_2].", emailAccount.user + "@" + emailAccount.domain, quotaValue * ONE_MEBIBYTE);
                                    }

                                    alertService.add({
                                        type: "success",
                                        message: statusText,
                                        closeable: true,
                                        autoClose: 10000,
                                        group: "alertGroup" + $rootScope.meta.accounts.indexOf($scope.expandedAccount)
                                    });

                                    if ( quotaValue === 0 ) {
                                        emailAccount._diskquota = 0;
                                        emailAccount.diskquota = "unlimited";
                                        emailAccount.humandiskquota = HTML_INFINITY;
                                        emailAccount.diskusedpercent_float = emailAccount.diskusedpercent = 0;
                                    } else {
                                        emailAccount._diskquota = quotaValue * ONE_MEBIBYTE;
                                        emailAccount.diskquota = quotaValue;
                                        emailAccount.humandiskquota = LOCALE.format_bytes(emailAccount._diskquota);
                                        emailAccount.diskusedpercent_float = emailAccount.diskusedpercent = ((emailAccount._diskused / emailAccount._diskquota) * 100).toFixed(2);
                                    }

                                    emailAccount.humandiskusedpercent = LOCALE.numf(emailAccount.diskusedpercent_float) + "%";

                                    $scope.actionModule = undefined;
                                },
                                function(error) {
                                    $scope.changingQuota = false;
                                    alertService.add({
                                        type: "danger",
                                        message: error,
                                        closeable: true,
                                        group: "alertGroup" + $rootScope.meta.accounts.indexOf($scope.expandedAccount)
                                    });
                                }
                            );

                        }, 250);
                    };

                    /**
                     * Click handler for the delete link, opens the delete module for the account
                     * @method onClickDelete
                     * @param  {Object} emailAccount The email account to open the delete module for
                     */
                    $scope.onClickDelete = function(emailAccount) {
                        if ( $scope.expandedAccount === emailAccount && $scope.actionModule === "delete" ) {
                            $scope.cancelAction();
                        } else {
                            $scope.clearStatus($scope.expandedAccount);
                            $scope.actionModule = "delete";
                            $scope.expandedAccount = emailAccount;

                            $timeout(function() {
                                $scope.onModuleOpened($rootScope.meta.accounts.indexOf(emailAccount));
                            }, 350);
                        }
                    };

                    /**
                     * Click handler for the delete button on the delete module, submits the account to emailAccountService.deleteEmailAccount
                     * @method onClickDeleteConfirm
                     */
                    $scope.onClickDeleteConfirm = function() {

                        $scope.deletingAccount = true;
                        $scope.clearStatus($scope.expandedAccount);
                        $scope.expandedAccount.deleting = true;

                        // If we're removing the last item in the list, clear the green on the search box
                        if ( $rootScope.meta.accounts.length === 1 && $rootScope.meta.filterValue ) {
                            $scope.filterTermPending = true;
                        }

                        return emailAccountsService.deleteEmailAccount($scope.expandedAccount.user, $scope.expandedAccount.domain).then(
                            function() {

                                var status = {
                                    message: LOCALE.maketext("Account “[_1]” deleted.", $scope.expandedAccount.user + "@" + $scope.expandedAccount.domain),
                                    type: "success",
                                    closeable: true,
                                    autoClose: 10000
                                };

                                $scope.filterTermPending = false;
                                $scope.expandedAccount.deleted = true;

                                // Special handling for when the last record is removed from a filtered list
                                // Allows the search to go red while the deleted status stays displayed for 10s
                                if ( $rootScope.meta.filterValue && $rootScope.meta.accounts.length === 1 && $rootScope.meta.totalItems <= $rootScope.meta.pageSize ) {

                                    status.group = "tableStatus";

                                    alertService.add(status);

                                    // 250ms timeout to allow the action module to slide closed before clearing the list
                                    $timeout(function() {
                                        $rootScope.meta.accounts = [];
                                    }, 250);

                                } else {
                                    status.group = "alertGroup" + $rootScope.meta.accounts.indexOf($scope.expandedAccount);
                                    alertService.add(status);
                                }

                                $scope.deletingAccount = false;
                                $scope.actionModule = undefined;
                            },
                            function(error) {
                                alertService.add({
                                    type: "danger",
                                    message: error,
                                    closeable: true,
                                    group: "alertGroup" + $rootScope.meta.accounts.indexOf($scope.expandedAccount)
                                });
                                $scope.deletingAccount = false;
                            }
                        );
                    };

                    /**
                     * Click handler for the Set Up Mail Client link, opens the setup module for the account
                     * @method onClickSetup
                     */
                    $scope.onClickSetup = function(emailAccount) {

                        if ( $scope.showCalAndContacts ) {
                            if ( $scope.expandedAccount === emailAccount && $scope.actionModule === "setup" ) {
                                $scope.cancelAction();
                            } else {
                                $scope.actionModule = "setup";
                                $scope.expandedAccount = emailAccount;

                                $timeout(function() {
                                    $scope.onModuleOpened($rootScope.meta.accounts.indexOf(emailAccount));
                                }, 350);
                            }
                        } else {
                            $window.open("../clientconf.html?acct=" + $window.encodeURIComponent(emailAccount.email), "_blank");
                        }

                    },

                    /**
                     * Click handler for the Manage Suspension link, opens the suspend module for the account
                     * @method onClickSuspendOptions
                     */
                    $scope.onClickSuspendOptions = function(emailAccount) {
                        if ( $scope.expandedAccount === emailAccount && $scope.actionModule === "suspend" ) {
                            $scope.cancelAction();
                        } else {

                            if ( $scope.expandedAccount ) {
                                $scope.expandedAccount.status = undefined;
                            }

                            $scope.actionModule = "suspend";
                            $scope.expandedAccount = emailAccount;

                            var outgoing = emailAccount.suspended_outgoing === true ? "suspend" : emailAccount.hold_outgoing === true ? "hold" : "allow";

                            $scope.suspendOptions = {
                                login: emailAccount.suspended_login,
                                incoming: emailAccount.suspended_incoming,
                                outgoing: outgoing,
                                currentOutgoing: outgoing, // Extra field for the current outgoing so we know whether or not they have held messages
                                deleteHeldMessages: 0
                            };

                            if ( outgoing === "hold" ) {

                                $scope.checkingHolds = true;

                                emailAccountsService.getHeldMessageCount(emailAccount.email).then(
                                    function(messageCount) {
                                        $scope.checkingHolds = false;
                                        $scope.suspendOptions.currentlyHeld = messageCount;
                                    },
                                    function(error) {
                                        $scope.checkingHolds = false;
                                        alertService.add({
                                            type: "danger",
                                            message: error,
                                            closeable: true,
                                            group: "alertGroup" + $rootScope.meta.accounts.indexOf($scope.expandedAccount),
                                            replace: false
                                        });
                                    }
                                );
                            }

                            $timeout(function() {
                                $scope.onModuleOpened($rootScope.meta.accounts.indexOf(emailAccount));
                            }, 350);
                        }
                    };

                    $scope.onClickSaveSuspensions = function() {

                        $scope.clearStatus($scope.expandedAccount);
                        $scope.suspending = true;

                        var deleteHeld = $scope.suspendOptions.deleteHeldMessages;
                        var currentOutgoing = $scope.suspendOptions.currentOutgoing;

                        delete $scope.suspendOptions.deleteHeldMessages;
                        delete $scope.suspendOptions.currentOutgoing;
                        delete $scope.suspendOptions.currentlyHeld;

                        var alertGroupId = $rootScope.meta.accounts.indexOf($scope.expandedAccount);

                        var changeSuspensionsSuccess = function(results) {

                            results.forEach(function(result) {

                                if ( result.message !== undefined ) {

                                    // See _createAPICall and changeSuspensions in emailAccountsService for why this uses _assign
                                    alertService.add(_.assign({
                                        closeable: true,
                                        group: "alertGroup" + alertGroupId,
                                        replace: false
                                    }, result));
                                }

                                if ( result.type === "success" ) {
                                    switch (result.method) {
                                        case "suspend_login":
                                            $scope.expandedAccount.suspended_login = true;
                                            break;
                                        case "unsuspend_login":
                                            $scope.expandedAccount.suspended_login = false;
                                            break;
                                        case "suspend_incoming":
                                            $scope.expandedAccount.suspended_incoming = true;
                                            break;
                                        case "unsuspend_incoming":
                                            $scope.expandedAccount.suspended_incoming = false;
                                            break;
                                        case "suspend_outgoing":
                                            $scope.expandedAccount.suspended_outgoing = true;
                                            break;
                                        case "unsuspend_outgoing":
                                            $scope.expandedAccount.suspended_outgoing = false;
                                            break;
                                        case "hold_outgoing":
                                            $scope.expandedAccount.hold_outgoing = true;
                                            break;
                                        case "release_outgoing":
                                            $scope.expandedAccount.hold_outgoing = false;
                                            break;
                                    }
                                }

                            });

                            $scope.suspending = false;

                            $scope.expandedAccount.has_suspended = $scope.expandedAccount.suspended_login || $scope.expandedAccount.suspended_incoming || $scope.expandedAccount.suspended_outgoing || $scope.expandedAccount.hold_outgoing;

                            $scope.actionModule = undefined;
                        };

                        var changeSuspensionsError = function(errors) {

                            errors.forEach(function(error) {
                                alertService.add({
                                    type: "danger",
                                    message: error,
                                    closeable: true,
                                    group: "alertGroup" + alertGroupId,
                                    replace: false
                                });
                            });

                            $scope.suspending = false;
                        };

                        // If deleting held messages, do that first and only change the suspensions if there's no error from deleting
                        if ( deleteHeld ) {

                            var releaseAfterDelete = (currentOutgoing === "hold" && $scope.suspendOptions.outgoing === "allow") ? 1 : 0;

                            return emailAccountsService.deleteHeldMessages($scope.expandedAccount.email, releaseAfterDelete).then(
                                function(deletedCount) {

                                    alertService.add({
                                        message: LOCALE.maketext("[numf,_1] messages have been queued for deletion from the outgoing mail queue.", deletedCount),
                                        type: "success",
                                        closeable: true,
                                        autoClose: 10000,
                                        group: "alertGroup" + alertGroupId,
                                        replace: false
                                    });

                                    if ( releaseAfterDelete === 1 ) {
                                        $scope.suspendOptions.outgoing = "hold";
                                    }

                                    return emailAccountsService.changeSuspensions($scope.expandedAccount, $scope.suspendOptions).then(changeSuspensionsSuccess, changeSuspensionsError);
                                },
                                function(error) {

                                    $scope.suspending = false;

                                    alertService.add({
                                        type: "danger",
                                        message: error,
                                        closeable: true,
                                        group: "alertGroup" + alertGroupId,
                                        replace: false
                                    });
                                }
                            );
                        } else {
                            return emailAccountsService.changeSuspensions($scope.expandedAccount, $scope.suspendOptions).then(changeSuspensionsSuccess, changeSuspensionsError);
                        }

                    };

                    /**
                     * Callback for clicking on one of the table headers to sort by column
                     */
                    $scope.sortList = function() {

                        if ( $scope.currentFetchTimeout ) {
                            $timeout.cancel($scope.currentFetchTimeout);
                        }

                        $scope.currentFetchTimeout = $timeout(function() {
                            $scope.saveMetaToComponentSettings();
                            $rootScope.meta.currentPage = 1;
                            $scope.fetch();
                        }, 250);
                    };

                    /**
                     * Callback for clicking on one of the pagination nav links to move between pages
                     */
                    $scope.selectPage = function() {

                        if ( $scope.currentFetchTimeout ) {
                            $timeout.cancel($scope.currentFetchTimeout);
                        }

                        $scope.currentFetchTimeout = $timeout(function() {
                            $scope.fetch();
                        }, 250);
                    };

                    /**
                     * Callback for selecting a page size from the pagination <select>
                     */
                    $scope.selectPageSize = function() {

                        if ( $scope.currentFetchTimeout ) {
                            $timeout.cancel($scope.currentFetchTimeout);
                        }

                        $scope.currentFetchTimeout = $timeout(function() {
                            $scope.saveMetaToComponentSettings();
                            $rootScope.meta.currentPage = 1;
                            $scope.fetch();
                        }, 250);
                    };

                    /**
                     * Callback for entering filter input into the search bar
                     */
                    $scope.searchList = function() {

                        $scope.filterTermPending = true;

                        if ( $scope.currentFetchTimeout ) {
                            $timeout.cancel($scope.currentFetchTimeout);
                        }

                        localStorage.setItem(
                            $scope.storageKey,
                            PAGE.securityToken + ":" + $rootScope.meta.filterValue
                        );

                        $scope.currentFetchTimeout = $timeout(function() {
                            $rootScope.meta.currentPage = 1;
                            $scope.fetch();
                        }, 250);
                    };

                    /**
                     * Callback that clears the expandedAccount field after all open modules have been collapsed
                     */
                    $scope.collapseFinished = function() {
                        if ( $scope.actionModule === undefined ) {
                            $scope.expandedAccount = undefined;
                        }
                    };

                    /**
                     * Calls emailAccountsService.getEmailAccounts to load the email accounts for the current page
                     */
                    $scope.fetch = function() {

                        $scope.loadingEmailAccounts = true;
                        $rootScope.meta.mobileItemCountText = undefined;

                        var sortMethod = "lexicographic";

                        if ( $rootScope.meta.sortBy === "_diskused" || $rootScope.meta.sortBy === "diskusedpercent" || $rootScope.meta.sortBy === "has_suspended" ) {
                            sortMethod = "numeric";
                        } else if ( $rootScope.meta.sortBy === "_diskquota" ) {
                            sortMethod = "numeric_zero_as_max";
                        }

                        var apiParams = {
                            "api.sort": 1,
                            "api.sort_column": $rootScope.meta.sortBy,
                            "api.sort_method": sortMethod,
                            "api.sort_reverse": $rootScope.meta.sortDirection === "asc" ? 0 : 1,
                            "api.paginate": 1,
                            "api.paginate_start": ($rootScope.meta.currentPage - 1) * $rootScope.meta.pageSize,
                            "api.paginate_size": $rootScope.meta.pageSize,
                            "api.paginate_page": $rootScope.meta.currentPage
                        };

                        if ( $rootScope.meta.filterValue && $rootScope.meta.filterValue !== "" ) {
                            apiParams["api.filter"] = 1;
                            apiParams["api.filter_term_0"] = $rootScope.meta.filterValue;
                            apiParams["api.filter_column_0"] = "login";
                        }

                        $rootScope.meta.accounts = [];

                        // Setting min-height to the current height to prevent the page jumping
                        // around when the list is fetching
                        var container = angular.element("#popsAccountList");

                        if ( container && container[0] ) {
                            container.css({ minHeight: $window.getComputedStyle(container[0]).height });
                        }

                        var apiPromise = emailAccountsService.getEmailAccounts(apiParams);
                        $scope.fetchPromise = apiPromise;

                        apiPromise.then(
                            function(response) {

                                // We only want to actually process the response if it's the last request we sent
                                if ( $scope.fetchPromise !== apiPromise ) {
                                    return;
                                }

                                var data = response.data;
                                var metadata = response.meta;

                                // Don't redirect to /addEmailAccount if there's a filterValue defined
                                if ( metadata.paginate.total_records === 0 && $rootScope.initialLoad && !$rootScope.meta.filterValue ) {
                                    $rootScope.initialLoad = false;
                                    $location.path("/addEmailAccount");
                                } else {

                                    $rootScope.initialLoad = false;
                                    $rootScope.meta.totalItems = metadata.paginate.total_records;
                                    $rootScope.meta.totalPages = metadata.paginate.total_pages;

                                    if ($rootScope.meta.totalItems > _.min($rootScope.meta.pageSizes)) {
                                        $rootScope.meta.showPager = true;
                                        var start = ($rootScope.meta.currentPage - 1) * $rootScope.meta.pageSize;
                                        $rootScope.meta.start = start + 1;
                                        $rootScope.meta.limit = start + data.length;

                                    } else {

                                        // hide pager and pagination
                                        $rootScope.meta.showPager = false;

                                        if (data.length === 0) {
                                            $rootScope.meta.start = 0;
                                        } else {

                                        // table statistics
                                            $rootScope.meta.start = 1;
                                        }

                                        $rootScope.meta.limit = data.length;
                                    }

                                    $rootScope.meta.mobileItemCountText = LOCALE.maketext("Displaying [_1] to [_2] out of [_3] records",
                                        $rootScope.meta.start, $rootScope.meta.limit, $rootScope.meta.totalItems
                                    );

                                    angular.element("#popsAccountList").css({ minHeight: "" });
                                    $rootScope.meta.accounts = data;
                                    $scope.loadingEmailAccounts = false;
                                    $scope.filterTermPending = false;
                                }

                            },
                            function(error) {
                                growl.error(error);
                                $scope.loadingEmailAccounts = false;
                                $scope.filterTermPending = false;
                            }
                        );

                    };

                    $scope.getSearchClass = function() {
                        if ( !$rootScope.initialLoad && !$scope.filterTermPending && !$scope.loadingEmailAccounts && $scope.meta.filterValue ) {
                            return $rootScope.meta.accounts && $rootScope.meta.accounts.length > 0 ? "success" : "danger";
                        } else {
                            return "";
                        }
                    };

                    var unregisterAddListener = $rootScope.$on("emailAccountAdded", $scope.fetch);

                    if ( $rootScope.initialLoad && PAGE.nvdata && PAGE.nvdata.hasOwnProperty(COMPONENT_NAME) ) {
                        $scope.setMetaFromComponentSettings(PAGE.nvdata[COMPONENT_NAME]);
                    }

                    var storageValue = localStorage.getItem($scope.storageKey);
                    if ( storageValue && (0 === storageValue.indexOf(PAGE.securityToken + ":")) ) {
                        $rootScope.meta.filterValue = storageValue.substr( 1 + PAGE.securityToken.length );
                    }

                    if ( $routeParams.account && $routeParams.account !== $rootScope.meta.filterValue ) {
                        $rootScope.meta.filterValue = $routeParams.account;
                        $rootScope.meta.accounts = undefined;
                    }

                    $scope.$on("$destroy", function() {
                        componentSettingSaverService.unregister(COMPONENT_NAME);
                        unregisterAddListener();
                    });

                    if ( $rootScope.initialLoad ) {
                        componentSettingSaverService.register(COMPONENT_NAME);
                        $timeout($scope.fetch);
                    } else {
                        var register = componentSettingSaverService.register(COMPONENT_NAME);
                        if ( register ) {
                            register.then(
                                function(result) {
                                    if ( result ) {

                                        if ( $routeParams.account && $routeParams.account !== result.filterValue ) {
                                            result.filterValue = $routeParams.account;
                                            $rootScope.meta.currentPage = 1;
                                            $rootScope.meta.accounts = undefined;
                                            $scope.saveMetaToComponentSettings();
                                        }

                                        $scope.setMetaFromComponentSettings(result);
                                    }

                                    if ( !$rootScope.meta.accounts ) {
                                        $scope.fetch();
                                    }

                                },
                                function() {
                                    if ( !$rootScope.meta.accounts ) {
                                        $scope.fetch();
                                    }
                                }
                            );
                        }
                    }
                }
            ]
        );

    }
);

/*
# base/frontend/paper_lantern/mail/pops/validators/emailAccountAllowedChars.js Copyright(c) 2017 cPanel, Inc.
#                                                                                        All rights Reserved.
# copyright@cpanel.net                                                                      http://cpanel.net
# This code is subject to the cPanel license.                              Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/validators/emailAccountAllowedChars',[
        "angular"
    ],
    function(angular) {

        /**
         * Directive that checks to make sure an input only allows a-z, A-Z, 0-9, ., -, and _
         *
         * @example
         * <input type="text" name="account" email-allowed-chars>
         */

        var module;
        try {
            module = angular.module("cpanel.mail.Pops");
        } catch (e) {
            module = angular.module("cpanel.mail.Pops", []);
        }

        module.directive("emailAllowedChars", function() {
            return {
                require: "ngModel",
                restrict: "A",
                link: function( scope, element, attrs, ngModel ) { // eslint-disable-line no-unused-vars
                    // "You can only enter letters, numbers, periods, hyphens, and underscores."
                    var pattern = /[^a-zA-Z0-9.\-_]/;

                    ngModel.$validators.emailAllowedChars = function(model, view) { // eslint-disable-line no-unused-vars
                        if ( !ngModel.$isEmpty(view) ) {
                            return !pattern.test(view);
                        }
                        return true;
                    };
                }
            };
        });

    }
);

/*
# base/frontend/paper_lantern/mail/pops/validators/emailAccountFullLength.js Copyright(c) 2017 cPanel, Inc.
#                                                                                      All rights Reserved.
# copyright@cpanel.net                                                                    http://cpanel.net
# This code is subject to the cPanel license.                            Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/validators/emailAccountFullLength',[
        "angular"
    ],
    function(angular) {

        var module;

        /**
         * Directive that checks the full length of two form fields + 1 (for the @) to make sure an email address is a valid length
         * @attribute {Integer} emailFullLength The maximum allowed length for the two fields + 1
         * @attribute {String}  emailOtherValue The other form field to compare against
         *
         * @example
         * <form name="formName">
         *     <input type="text" name="account" email-full-length="254" email-other-value="formName.domain">
         *     <input type="text" name="domain">
         * </form>
         */

        try {
            module = angular.module("cpanel.mail.Pops");
        } catch (e) {
            module = angular.module("cpanel.mail.Pops", []);
        }

        module.directive("emailFulllength", function() {
            return {
                require: "ngModel",
                restrict: "A",
                link: function( scope, element, attrs, ngModel ) { // eslint-disable-line no-unused-vars

                    ngModel.$validators.emailFulllength = function(model, view) { // eslint-disable-line no-unused-vars

                        var ngOtherModel = getNgOtherModel();
                        if (!ngOtherModel) {
                            var value = view || "";
                            return (value.length + 1) <= attrs.emailFulllength;
                        }

                        var thisIsEmpty = ngModel.$isEmpty(view);
                        var otherIsEmpty = ngOtherModel.$isEmpty(ngOtherModel.$viewValue);
                        if (thisIsEmpty && otherIsEmpty) {

                            // Don't validate this condition if both values are empty
                            return true;
                        } else {

                            var thisValue = view || "";
                            var otherValue = (ngOtherModel.$pending || ngOtherModel.$invalid) ? ngOtherModel.$viewValue : ngOtherModel.$modelValue;

                            return (thisValue.length + otherValue.length + 1) <= attrs.emailFulllength;
                        }

                    };

                    scope.$watchGroup([
                        function() {
                            var ngOtherModel = getNgOtherModel();
                            return ngOtherModel && ngOtherModel.$viewValue;
                        },
                        function() {
                            var ngOtherModel = getNgOtherModel();
                            return ngOtherModel && ngOtherModel.$modelValue;
                        }
                    ], function() {
                        ngModel.$validate();
                    });

                    var _ngOtherModel;
                    function getNgOtherModel() {
                        if (!_ngOtherModel) {
                            _ngOtherModel = scope.$eval(attrs.emailOtherValue);
                        }
                        return _ngOtherModel;
                    }
                }
            };
        });
    }
);

/*
# base/frontend/paper_lantern/mail/pops/validators/emailAccountSafePeriods.js Copyright(c) 2017 cPanel, Inc.
#                                                                                       All rights Reserved.
# copyright@cpanel.net                                                                     http://cpanel.net
# This code is subject to the cPanel license.                             Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/validators/emailAccountSafePeriods',[
        "angular"
    ],
    function(angular) {

        /**
         * Directive that makes sure an input doesn't start or end with a period, or contain two consecutive periods
         *
         * @example
         * <input type="text" name="account" email-safe-periods>
         */

        var module;
        try {
            module = angular.module("cpanel.mail.Pops");
        } catch (e) {
            module = angular.module("cpanel.mail.Pops", []);
        }

        module.directive("emailSafePeriods", function() {
            return {
                require: "ngModel",
                restrict: "A",
                link: function( scope, element, attrs, ngModel ) { // eslint-disable-line no-unused-vars
                    ngModel.$validators.emailSafePeriods = function(model, view) { // eslint-disable-line no-unused-vars
                        if ( !ngModel.$isEmpty(view) ) {
                            return view.indexOf(".") !== 0 && view.lastIndexOf(".") !== (view.length - 1) && view.indexOf("..") === -1;
                        }
                        return true;
                    };
                }
            };
        });

    }
);

/*
# base/frontend/paper_lantern/mail/pops/views/addEmailAccount.js Copyright(c) 2017 cPanel, Inc.
#                                                                          All rights Reserved.
# copyright@cpanel.net                                                        http://cpanel.net
# This code is subject to the cPanel license.                Unauthorized copying is prohibited
*/

/* global define: false, PAGE: false */

define(
    'app/views/addEmailAccount',[
        "lodash",
        "angular",
        "cjt/util/locale",
        "uiBootstrap",
        "cjt/directives/actionButtonDirective",
        "cjt/directives/bytesInput",
        "cjt/directives/passwordFieldDirective",
        "cjt/directives/validateEqualsDirective",
        "cjt/directives/validationContainerDirective",
        "cjt/directives/validationItemDirective",
        "app/validators/emailAccountAllowedChars",
        "app/validators/emailAccountFullLength",
        "app/validators/emailAccountSafePeriods"
    ],
    function(_, angular, LOCALE) {

        var app = angular.module("cpanel.mail.Pops");

        app.controller("addEmailAccountCtrl",
            ["$rootScope", "$scope", "emailAccountsService", "ONE_MEBIBYTE",
                function($rootScope, $scope, emailAccountsService, ONE_MEBIBYTE) {

                    $scope.requiredPasswordStrength = PAGE.requiredPasswordStrength;
                    $scope.userDefinedDefaultQuota = PAGE.userDefinedQuotaDefaultValue;
                    $scope.mailDomains = _.map(PAGE.mailDomains, _.property("domain"));
                    $scope.creatingAccount = false;
                    $scope.isRTL = PAGE.isRTL;
                    $scope.selectedQuotaUnit = "MB";
                    $scope.canSetUnlimited = PAGE.canSetUnlimited !== undefined ? PAGE.canSetUnlimited : true;

                    // Quota values come in as megabytes, translate back to bytes
                    $scope.defaultQuota = PAGE.userDefinedQuotaDefaultValue ? PAGE.userDefinedQuotaDefaultValue : undefined;
                    $scope.maxQuota = PAGE.maxEmailQuota;

                    $scope.emailAccount = {
                        account: undefined,
                        domain: $scope.mailDomains.length > 0 ? $scope.mailDomains[0] : undefined,
                        password: undefined,
                        password2: undefined,
                        quota: $scope.defaultQuota,
                        quotaType: PAGE.defaultQuotaSelected,
                        sendWelcome: true
                    };

                    $scope.clearStatus = function() {
                        $scope.status = undefined;
                    };

                    /**
                     * Click handler for the Create Account button, pulls account, password, domain, quota, and sendWelcome
                     * out of the scope and submits them to the addEmailAccount method on the emailAccountsService.
                     */
                    $scope.addEmailAccount = function() {

                        // We need to wait until all the validators are complete before submitting
                        // the form.
                        if ( $scope.addEmailAccountForm.$pending ) {
                            return false;
                        }

                        var formOrder = ["add_email_account", "add_email_domain", "add_email_password1", "add_email_password2", "quota"];

                        if ( $scope.addEmailAccountForm.$invalid ) {
                            $scope.addEmailAccountForm.$setSubmitted();
                            var focused = false;

                            angular.forEach(formOrder, function(name) {
                                if ( $scope.addEmailAccountForm[name] && $scope.addEmailAccountForm[name].$invalid ) {
                                    $scope.addEmailAccountForm[name].$setDirty();
                                    if ( !focused ) {
                                        angular.element("[name='addEmailAccountForm'] [name='" + name + "']").focus();
                                        focused = true;
                                    }
                                }
                            });

                            return;
                        }


                        var newAccount = {
                            email: $scope.emailAccount.account,
                            password: $scope.emailAccount.password,
                            domain: $scope.emailAccount.domain,
                            send_welcome_email: $scope.emailAccount.sendWelcome ? 1 : 0, // eslint-disable-line camelcase
                            quota: 0
                        };

                        if ( $scope.emailAccount.quotaType === "userdefined" ) {
                            newAccount.quota = $scope.emailAccount.quota;
                        } else if ( !$scope.canSetUnlimited ) {
                            newAccount.quota = $scope.maxQuota;
                        }

                        $scope.creatingAccount = true;
                        $scope.status = undefined;

                        return emailAccountsService.addEmailAccount(newAccount).then(
                            function(data) {
                                $scope.creatingAccount = false;

                                var created = data.replace("+", "@");
                                $scope.status = {
                                    type: "success",
                                    message: LOCALE.maketext("Account “[_1]” created ([output,url,_2,View]).", created, "#/listEmailAccounts/" + created),
                                    closeable: true,
                                    autoClose: 10000
                                };

                                $scope.emailAccount = {
                                    account: undefined,
                                    domain: $scope.mailDomains.length > 0 ? $scope.mailDomains[0] : undefined,
                                    quota: $scope.defaultQuota,
                                    quotaType: PAGE.defaultQuotaSelected,
                                    quotaUnit: "MB",
                                    sendWelcome: true
                                };

                                $scope.addEmailAccountForm.$setUntouched();
                                $scope.addEmailAccountForm.$setPristine();

                                $rootScope.$broadcast("emailAccountAdded");

                                if ( $rootScope.meta && $rootScope.meta.accounts ) {
                                    $rootScope.meta.accounts = undefined;
                                }

                            },
                            function(error) {
                                $scope.status = {
                                    type: "danger",
                                    message: error
                                };
                                $scope.creatingAccount = false;
                            }
                        );

                    };

                    $rootScope.initialLoad = false;
                }]
        );

    }
);

/*
# base/frontend/paper_lantern/mail/pops/views/configurationOptions.js Copyright(c) 2017 cPanel, Inc.
#                                                                               All rights Reserved.
# copyright@cpanel.net                                                             http://cpanel.net
# This code is subject to the cPanel license.                     Unauthorized copying is prohibited
*/

/* global define: false */

define(
    'app/views/configurationOptions',[
        "angular",
        "cjt/util/locale"
    ],
    function(angular, LOCALE) {

        var app = angular.module("cpanel.mail.Pops");

        app.controller("configurationOptionsCtrl",
            ["$rootScope", "$scope", "growl", "emailAccountsService",
                function($rootScope, $scope, growl, emailAccountsService) {

                    $scope.sharedAddressBook = {
                        enabled: false,
                        enabling: true,
                        disabling: true
                    };

                    $scope.clearStatus = function() {
                        $scope.status = undefined;
                    };

                    /**
                     * Click handler for the "On" button, calls emailAccountsService.enableSharedAddressBook()
                     */
                    $scope.onClickEnableSharedAddressBook = function() {

                        if ( $scope.sharedAddressBook.enabled ) {
                            return;
                        }

                        $scope.sharedAddressBook.enabling = true;
                        $scope.status = undefined;

                        emailAccountsService.enableSharedAddressBook().then(
                            function(data) {
                                $scope.status = {
                                    message: LOCALE.maketext("Shared address book enabled."),
                                    type: "success",
                                    closeable: true,
                                    ttl: 10000
                                };
                                $scope.sharedAddressBook.enabled = ("" + data.shared) === "1";
                                $scope.sharedAddressBook.enabling = false;
                            },
                            function(error) {
                                $scope.status = {
                                    message: error,
                                    type: "danger"
                                };
                            }
                        );
                    };

                    /**
                     * Click handler for the "Off" button, calls emailAccountsService.disableSharedAddressBook()
                     */
                    $scope.onClickDisableSharedAddressBook = function() {

                        if ( !$scope.sharedAddressBook.enabled ) {
                            return;
                        }

                        $scope.sharedAddressBook.disabling = true;
                        $scope.status = undefined;

                        emailAccountsService.disableSharedAddressBook().then(
                            function(data) {
                                $scope.status = {
                                    message: LOCALE.maketext("Shared address book disabled."),
                                    type: "success",
                                    closeable: true,
                                    ttl: 10000
                                };
                                $scope.sharedAddressBook.enabled = ("" + data.shared) === "1";
                                $scope.sharedAddressBook.disabling = false;
                            },
                            function(error) {
                                $scope.status = {
                                    message: error,
                                    type: "danger"
                                };
                            }
                        );
                    };

                    emailAccountsService.isSharedAddressBookEnabled().then(
                        function(data) {
                            $scope.sharedAddressBook.enabled = ("" + data.shared) === "1";
                            $scope.sharedAddressBook.enabling = false;
                            $scope.sharedAddressBook.disabling = false;
                        },
                        function(error) {
                            $scope.sharedAddressBook.enabling = false;
                            $scope.sharedAddressBook.disabling = false;
                            growl.error(error);
                        }
                    );

                    $rootScope.initialLoad = false;
                }]
        );
    }
);

/*
# base/frontend/paper_lantern/mail/pops/views/defaultAccount.js Copyright(c) 2017 cPanel, Inc.
#                                                                         All rights Reserved.
# copyright@cpanel.net                                                       http://cpanel.net
# This code is subject to the cPanel license.               Unauthorized copying is prohibited
*/

/* global define: false, PAGE: false */

define(
    'app/views/defaultAccount',[
        "angular",
    ],
    function(angular) {

        var app = angular.module("cpanel.mail.Pops");

        app.controller("defaultAccountCtrl",
            ["$rootScope", "$scope", "growl", "emailAccountsService",
                function($rootScope, $scope, growl, emailAccountsService) {

                    $scope.emailDiskUsageEnabled = PAGE.emailDiskUsageEnabled;

                    emailAccountsService.getDefaultAccountUsage().then(
                        function(data) {
                            $scope.defaultAccountDiskUsed = data;
                        },
                        function(error) {
                            growl.error(error);
                        }
                    );
                    $rootScope.initialLoad = false;
                }]
        );

    }
);

/*
* mail/pops/index.js                              Copyright(c) 2017 cPanel, Inc.
*                                                           All rights Reserved.
* copyright@cpanel.net                                         http://cpanel.net
* This code is subject to the cPanel license. Unauthorized copying is prohibited
*/

/* global require: false, define: false, PAGE: false */

define(
    'app/index',[
        "angular",
        "cjt/modules",
        "jquery-chosen",
        "angular-chosen",
        "ngRoute"
    ],
    function(angular) {
        "use strict";
        return function() {

            // First create the application
            angular.module("cpanel.mail.Pops", [
                "angular-growl",
                "cjt2.cpanel",
                "cjt2.services.api",
                "cjt2.views.applicationController",
                "ngAnimate",
                "localytics.directives",
                "cjt2.directives.bytesInput",
                "cjt2.services.alert"
            ]);

            // Then load the application dependencies
            var app = require([
                "cjt/bootstrap",
                "app/services/emailAccountsService",
                "app/filters/emailLocaleString",
                "app/filters/encodeURIComponent",
                "app/filters/quotaProgressType",
                "app/views/listEmailAccounts",
                "app/views/addEmailAccount",
                "app/views/configurationOptions",
                "app/views/defaultAccount"
            ], function(BOOTSTRAP) {

                var app = angular.module("cpanel.mail.Pops");

                app.constant("ONE_MEBIBYTE", 1048576);
                app.config(["$animateProvider", "$routeProvider",
                    function($animateProvider, $routeProvider) {

                        $animateProvider.classNameFilter(/(action-module|disappearing-table-row|animated-view)/);

                        $routeProvider.when("/addEmailAccount", {
                            controller: "addEmailAccountCtrl",
                            templateUrl: "views/addEmailAccount.ptt"
                        });

                        $routeProvider.when("/listEmailAccounts/:account?", {
                            controller: "listEmailAccountsCtrl",
                            templateUrl: "views/listEmailAccounts.ptt"
                        });

                        if ( window.PAGE.defaultAccountEnabled ) {
                            $routeProvider.when("/defaultAccount", {
                                controller: "defaultAccountCtrl",
                                templateUrl: "views/defaultAccount.ptt"
                            });
                        }

                        if ( window.PAGE.showConfigSection ) {
                            $routeProvider.when("/configurationOptions", {
                                controller: "configurationOptionsCtrl",
                                templateUrl: "views/configurationOptions.ptt"
                            });
                        }

                        $routeProvider.otherwise("/listEmailAccounts");
                    }
                ]);

                var tabs = {
                    "/addEmailAccount": 0,
                    "/listEmailAccounts": 1,
                    "/defaultAccount": 2,
                    "/configurationOptions": 3
                };

                app.controller("baseController",
                    ["$rootScope", "$location", "$scope",
                        function($rootScope, $location, $scope) {

                            $rootScope.initialLoad = true;

                            $scope.pageTabs = [];
                            $scope.loading = true;
                            $scope.activeTab = -1;
                            $scope.showDefaultAccount = window.PAGE.defaultAccountEnabled;
                            $scope.showConfigSection = window.PAGE.showConfigSection;

                            $rootScope.$on("$routeChangeStart", function() {
                                $scope.loading = true;
                            });

                            $rootScope.$on("$routeChangeSuccess", function() {
                                $scope.loading = false;

                                if ( $location.path().indexOf("/listEmailAccounts") > -1 ) {
                                    $scope.activeTab = tabs["/listEmailAccounts"];
                                    $rootScope.createdAccounts = 0;
                                } else {
                                    $scope.activeTab = tabs[$location.path()];
                                }

                            });

                            $rootScope.$on("$routeChangeError", function() {
                                $scope.loading = false;
                            });

                            $scope.go = function(path) {
                                $location.path(path);
                            };

                        }]
                );

                app.animation(".action-module", ["$animateCss", function($animateCss) {
                    return {
                        enter: function(elem, done) {
                            var height = elem[0].offsetHeight;
                            return $animateCss(elem, {
                                from: { height: "0" },
                                to: { height: height + "px" },
                                duration: 0.3,
                                easing: "ease-out",
                                event: "enter",
                                structural: true
                            })
                                .start()
                                .done(function() {
                                    elem[0].style.height = "";
                                    done();
                                });
                        },
                        leave: function(elem, done) {
                            var height = elem[0].offsetHeight;
                            return $animateCss(elem, {
                                event: "leave",
                                structural: true,
                                from: { height: height + "px" },
                                to: { height: "0" },
                                duration: 0.3,
                                easing: "ease-out",
                            })
                                .start()
                                .done(function() {
                                    done();
                                });
                        },
                    };
                }]);

                BOOTSTRAP("#body-content", "cpanel.mail.Pops");
            });

            return app;
        };
    }
);


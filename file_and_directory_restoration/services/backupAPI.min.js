define(["angular","cjt/util/locale","cjt/util/parse","cjt/io/uapi-request","cjt/services/APIService","cjt/io/uapi"],function(angular,LOCALE,PARSE,APIREQUEST){"use strict";var app;try{app=angular.module("App")}catch(e){app=angular.module("App",[])}app.factory("backupAPIService",["APIService",function(APIService){var validBackupTypes={compressed:LOCALE.maketext("Compressed"),uncompressed:LOCALE.maketext("Uncompressed"),incremental:LOCALE.maketext("Incremental")};var validTypes={file:LOCALE.maketext("File"),dir:LOCALE.maketext("Directory"),symlink:LOCALE.maketext("Symlink")};function parseBackupData(backupData){var backups=backupData.data;var parsedBackups=[];backups.forEach(function(backup){backup.lastModifiedTime=LOCALE.local_datetime(parseInt(backup.mtime,10),"datetime_format_short");if(validBackupTypes.hasOwnProperty(backup.backupType)){backup.backupType=validBackupTypes[backup.backupType];backup.type=validTypes[backup.type]}else{throw"DEVELOPER ERROR: Invalid backup type"}parsedBackups.push(backup)});return parsedBackups}function parseDirectoryContents(directoryContents){var parsedContents=[];directoryContents.data.forEach(function(content){content.conflict=PARSE.parsePerlBoolean(content.conflict);content.exists=PARSE.parsePerlBoolean(content.exists);parsedContents.push(content)});directoryContents.data=parsedContents;return directoryContents}var BackupAPIService=function(){};BackupAPIService.prototype=new APIService;angular.extend(BackupAPIService.prototype,{listDirectoryContents:function(path,currentPage,pageSize){var apiCall=new APIREQUEST.Class;apiCall.initialize("Restore","directory_listing");apiCall.addArgument("path",path);if(pageSize){apiCall.addPaging(currentPage,pageSize)}var deferred=this.deferred(apiCall,{transformAPISuccess:parseDirectoryContents,transformAPIFailure:function(response){return response.error}});return deferred.promise},listBackups:function(fullPath,exists){var apiCall=new APIREQUEST.Class;apiCall.initialize("Restore","query_file_info");apiCall.addArgument("path",fullPath);apiCall.addArgument("exists",exists);var deferred=this.deferred(apiCall,{transformAPISuccess:parseBackupData,transformAPIFailure:function(response){return response.error}});return deferred.promise},restoreBackup:function(fullPath,backupID){var apiCall=new APIREQUEST.Class;apiCall.initialize("Restore","restore_file");apiCall.addArgument("backupID",backupID);apiCall.addArgument("path",fullPath);apiCall.addArgument("overwrite",1);var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){return response.data},transformAPIFailure:function(response){return response.error}});return deferred.promise}});return new BackupAPIService}])});
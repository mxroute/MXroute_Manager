define(["angular","cjt/core","cjt/util/locale","cjt/util/query","uiBootstrap","cjt/modules","cjt/directives/cpanel/searchSettingsPanel","cjt/models/searchSettingsModel","app/services/DomainsService","cjt/decorators/growlDecorator","cjt/directives/actionButtonDirective"],function(angular,CJT,LOCALE,QUERY){"use strict";const TLS_WIZ_URL="security/tls_wizard/#/create";var app=angular.module("App");app.controller("ViewDomainsController",["$scope","$timeout","$filter","$window","$location","DomainsService","$routeParams","SearchSettingsModel","user_domains","search_filter_settings","growl",function ViewDomainsController($scope,$timeout,$filter,$window,$location,$service,$routeParams,SearchSettingsModel,user_domains,search_filter_settings,growl){$scope.domains=user_domains;$scope.filteredDomains=$scope.domains;$scope.selected_auto_ssl_domains={excluded:[],included:[]};$scope.unsecuredDomains=[];$scope.quickFilterValue="";$scope.showPager=true;$scope.autossl_enabled=$service.is_autossl_enabled;$scope.autoSSLErrorsExist=false;$scope.meta={filterValue:""};var last_descriptor=null;$scope.datasource={get:function(descriptor,success){var result=$scope.filteredDomains.slice(Math.max(descriptor.index,0),descriptor.index+descriptor.count);success(result);last_descriptor=descriptor;last_descriptor.position=$window.pageYOffset}};$scope.check_for_reload=function(){if(!last_descriptor){return}var new_first_item=-1;var max_loaded=last_descriptor.index+last_descriptor.count;if($window.pageYOffset===0){new_first_item=0}else{var position=$window.pageYOffset;var perc_scrolled=last_descriptor.position/position;new_first_item=max_loaded*perc_scrolled}if(max_loaded-new_first_item>200){new_first_item=Math.max(new_first_item,0);$scope.uiScrollAdapter.reload(new_first_item)}};$scope.autossl_include_domains=function(domains){var flat_domains=domains.map(function(domain){domain.updating=true;return domain.domain});return $service.autossl_include_domains(flat_domains).then(function(){growl.success(LOCALE.maketext("The following domains have had their [asis,AutoSSL] exclusion removed: [list_and_quoted,_1]",flat_domains));domains.forEach(function(domain){domain.excluded_from_autossl=false;domain.domain_autossl_status="included";domain.certificate_status_name=$service.get_certificate_status(domain)})}).finally(function(){domains.forEach(function(domain){domain.updating=false});$scope.update_auto_ssl_domains()})};$scope.autossl_exclude_domains=function(domains){var flat_domains=domains.map(function(domain){domain.updating=true;return domain.domain});return $service.autossl_exclude_domains(flat_domains).then(function(){growl.success(LOCALE.maketext("The following domains will now be excluded from the [asis,AutoSSL] process: [list_and_quoted,_1]",flat_domains));domains.forEach(function(domain){domain.excluded_from_autossl=true;domain.domain_autossl_status="excluded";domain.certificate_status_name=$service.get_certificate_status(domain)})}).finally(function(){domains.forEach(function(domain){domain.updating=false});$scope.update_auto_ssl_domains()})};$scope.autossl_include_domain=function(domain){return $scope.autossl_include_domains([domain])};$scope.autossl_exclude_domain=function(domain){return $scope.autossl_exclude_domains([domain])};$scope.exclude_autossl_label=function(domains){if(domains.length===0){return LOCALE.maketext("Exclude Domains from AutoSSL",domains.length)}else{return LOCALE.maketext("Exclude [quant,_1,Domain,Domains] from AutoSSL",domains.length)}};$scope.include_autossl_label=function(domains){if(domains.length===0){return LOCALE.maketext("Include Domains during AutoSSL",domains.length)}else{return LOCALE.maketext("Include [quant,_1,Domain,Domains] during AutoSSL",domains.length)}};$scope.searchFilterOptions=new SearchSettingsModel(search_filter_settings);$scope.clearSearch=function(){$scope.meta.filterValue="";$scope.domainSearchFilterChanged()};$scope.filter_domains=function(domains){var filtered_domains=domains;if($scope.meta.filterValue){filtered_domains=$filter("filter")(filtered_domains,{domain:$scope.meta.filterValue})}filtered_domains=$scope.searchFilterOptions.filter(filtered_domains);return filtered_domains};$scope.update_auto_ssl_domains=function(){$scope.selected_auto_ssl_domains={excluded:[],included:[]};angular.forEach($scope.filteredDomains,function(domain){if(!domain.can_autossl_exclude){return}if(domain.selected){if(domain.excluded_from_autossl){$scope.selected_auto_ssl_domains.excluded.push(domain)}else{$scope.selected_auto_ssl_domains.included.push(domain)}}},$scope.selected_auto_ssl_domains)};$scope.searchSettingsPanelUpdated=function(){$scope.fetch()};$scope.fetch=function(){var new_domains=$scope.domains;new_domains=$scope.filter_domains(new_domains);var domains_changed=$scope.filteredDomains.length!==$scope.domains.length||new_domains.length!==$scope.filteredDomains.length;if(domains_changed){$scope.filteredDomains=new_domains;if($scope.uiScrollAdapter&&angular.isFunction($scope.uiScrollAdapter.reload)){$scope.uiScrollAdapter.reload(0)}}$scope.update_auto_ssl_domains();$scope.update_showing_text()};$scope.no_results_msg=function(){return LOCALE.maketext("No results found…")};$scope.get_advanced_filter_label=function(filterType){if(filterType==="displayAutoSubdomains"){return $scope.advancedFilters.displayAutoSubdomains?LOCALE.maketext("Yes"):LOCALE.maketext("No")}var filterOptions=$scope[filterType+"Options"];if(filterOptions){for(var i=0;i<filterOptions.length;i++){if(filterOptions[i].value===$scope.advancedFilters[filterType]){return filterOptions[i].label}}}return""};$scope.advanced_filters_set=function(){if($scope.advancedFilters.domainType!=="all"||$scope.advancedFilters.sslType!=="all"||$scope.advancedFilters.sslStatus!=="all"||!$scope.advancedFilters.displayAutoSubdomains){return true}return false};$scope.update_showing_text=function(){$scope.showing_text=LOCALE.maketext("[output,strong,Showing] [numf,_1] of [quant,_2,domain,domains]",$scope.filteredDomains.length,$scope.domains.length)};$scope.get_showing_text=function(){return $scope.showing_text};$scope.view_certificate=function(domain){return $window.open(domain.view_crt_url)};$scope._get_tls_wizard_url=function(params){var url=TLS_WIZ_URL;if(url.search(/^http/i)===-1){if(url.search(/^\//)!==-1){url=CJT.getRootPath()+url}else{url=CJT.buildFullPath(url)}}url+="?"+QUERY.make_query_string(params);return url};$scope.get_root_domain=function(domain){var root_domain=domain;if(domain.domain.match(/^www\./)){root_domain=$scope.find_domain_by_domain(domain.domain.replace(/^www\./,""))}return root_domain};$scope.upgrade_certificate_url=function(domain){if(domain){var params={domain:$scope.get_root_domain(domain).domain,certificate_type:domain.available_upgrades};return $scope._get_tls_wizard_url(params)}};$scope.purchase_certificate=function(domains){var params={domain:domains.map(function(domain){var actual_domain=$scope.get_root_domain(domain);return actual_domain.domain}),certificate_type:["dv","ov","ev"]};window.open($scope._get_tls_wizard_url(params),"_self");return false};$scope.domainSearchFilterChanged=function(){if($scope.meta.filterValue){$location.search("domain",$scope.meta.filterValue)}else{$location.search("domain",null)}$scope.fetch()};$scope.get_unsecured_domains_message=function(domains){return LOCALE.maketext("You have [numf,_1] unsecured parent [numerate,_1,domain,domains]. Would you like to purchase [numerate,_1,a certificate for that domain, certificates for those domains]?",domains.length)};$scope.getUnsecuredDomainsMessageNote=function(){return LOCALE.maketext("[output,strong,Note:] The number of “parent” domains excludes the ”www“ domains because the system automatically includes them during purchase if they pass [output,abbr,DCV,Domain Control Validation].")};$scope.find_domain_by_domain=function(domain){for(var i=0;i<$scope.domains.length;i++){if($scope.domains[i].domain===domain){return $scope.domains[i]}}};$scope.get_domain_lock_tooltip=function(tooltip_type,is_autossl,domain_type){var validation_ranks=$service.get_validation_ranks();if(validation_ranks[domain_type]>validation_ranks[tooltip_type]){return $service.get_validation_type_name(tooltip_type,false)}else if(validation_ranks[domain_type]===validation_ranks[tooltip_type]){return $service.get_validation_type_name(tooltip_type,is_autossl)}if($service.tls_wizard_can_do_validation_type(tooltip_type)){return LOCALE.maketext("Upgrade to [_1]",$service.get_validation_type_name(tooltip_type,false))}return""};$scope.show_unsecured_domains=function(){$scope.searchFilterOptions.show_only("sslType","unsecured");$scope.fetch()};$scope.get_upgrade_btn_title=function(domain){if(domain.upgrade_btn_title){return domain.upgrade_btn_title}var root_domain=$scope.get_root_domain(domain);domain.upgrade_btn_title=$service.get_upgrade_btn_title(root_domain.domain,domain.certificate);return domain.upgrade_btn_title};$scope.selectAllItems=function(allRowsSelected){angular.forEach($scope.filteredDomains,function(row){row.selected=allRowsSelected});$scope.update_auto_ssl_domains()};$scope.getRawLogWarning=function(){return LOCALE.maketext("Because some entries contain raw log data, the system may not translate it into the chosen language or locale.")};function _buildCheckCycle(){$timeout(function(){$service.isAutoSSLCheckInProgress().then(function(inProgress){if(!inProgress){$scope.autoSSLCheckActive=false;var messageTime=5;growl.success(LOCALE.maketext("The [asis,AutoSSL] check has completed. The page will refresh in [quant,_1,second,seconds].",messageTime),{ttl:messageTime*1e3,disableCountDown:false});$timeout(function(){$window.location.reload()},1e3*messageTime)}else{_buildCheckCycle()}})},1e3*60)}$scope.startUserAutoSSLLabel=function(){if($scope.autoSSLCheckActive){return LOCALE.maketext("[asis,AutoSSL] is in progress …")}else{return LOCALE.maketext("Run [asis,AutoSSL]")}};$scope.startUserAutoSSL=function(){$scope.autoSSLCheckActive=true;$service.startUserAutoSSL().then(_buildCheckCycle)};$scope.init=function(){if($routeParams["domain"]){$scope.meta.filterValue=$routeParams["domain"]}angular.element($window).bind("scroll",$scope.check_for_reload);var all_unsecured_domains=[];$scope.domains.forEach(function(domain){domain.upgrade_btn_title=$scope.get_upgrade_btn_title(domain);if(domain.certificate_type==="unsecured"){all_unsecured_domains.push(domain)}});var unsecuredActuals=[];var uniqueDomains={};angular.forEach(all_unsecured_domains,function(domain){var actual_domain=$scope.get_root_domain(domain);if(actual_domain.certificate_type!=="unsecured"){return false}if(actual_domain&&!uniqueDomains[actual_domain.domain]){uniqueDomains[actual_domain.domain]=actual_domain;unsecuredActuals.push(actual_domain)}});$scope.market_products_available=!!$service.get_products().length;$scope.unsecuredDomains=unsecuredActuals;$scope.fetch();if($service.is_autossl_enabled()){$timeout(function(){$service.getAutoSSLStatuses().then(function(statuses){statuses.forEach(function(status){var domainObj=$scope.find_domain_by_domain(status.domain);if(!domainObj){return}domainObj.autoSSLStatus=status;if(status.error){$scope.autoSSLErrorsExist=true;domainObj.certificate_status="has_autossl_problem";domainObj.autoSSLStatus.lastRunMessage=LOCALE.maketext("An error occurred the last time [asis,AutoSSL] ran, on [datetime,_1]:",domainObj.autoSSLStatus.runTime.getTime()/1e3)}else{domainObj.autoSSLStatus.lastRunMessage=LOCALE.maketext("[asis,AutoSSL] last ran on [datetime,_1].",domainObj.autoSSLStatus.runTime.getTime()/1e3)}});$scope.fetch()});$service.isAutoSSLCheckInProgress().then(function(inProgress){$scope.initialAutoSSLCheckComplete=true;$scope.autoSSLCheckActive=inProgress;if($scope.autoSSLCheckActive){_buildCheckCycle()}})},50)}};$scope.$on("$destroy",function(){angular.element($window).unbind("scroll",$scope.check_for_reload)});$scope.init()}])});
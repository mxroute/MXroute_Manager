define(["angular","lodash","cjt/util/locale","cjt/io/uapi-request","cjt/io/uapi","cjt/util/parse","cjt/services/APIService"],function(angular,_,LOCALE,APIREQUEST,APIDRIVER,PARSER){"use strict";var app;try{app=angular.module("cpanel.wordpress")}catch(e){app=angular.module("cpanel.wordpress",[])}app.factory("instancesApi",["pageState","$q","$log","APIService",function(pageState,$q,$log,APIService){var _instances;var _instancesLookup;var _invalidCount=0;var _lastLoaded;var _cacheTime=5*60*1e3;return{get:function(args){args=args||{};if(_instances&&!args.force&&!this._isCacheStale()){return this._getListFromCache()}else if(!args.force&&pageState.instances){try{return this._getListFromPrefetch()}catch(error){return this.fetch()}}else{return this.fetch()}},fetch:function(){var self=this;if(pageState.instances||pageState.prefetchNonFatalErrors){delete pageState.instances;delete pageState.prefetchNonFatalErrors}var apiCall=new APIREQUEST.Class;apiCall.initialize("WordPressInstanceManager","get_instances");var api=new APIService;return api.deferred(apiCall).promise.then(function success(response){try{var raw=response&&response.data&&response.data.instances;var errors=response&&response.data&&response.data.errors;self._set({raw:raw,parsed:self.parse(raw)});return self._getListFromCache({nonFatalErrors:errors})}catch(error){return $q.reject(LOCALE.maketext("The system failed to parse the response from the API: [_1]",error))}},function failure(error){return $q.reject(LOCALE.maketext("The system failed to retrieve the list of your [asis,WordPress] installations from the server: [_1]",error))})},getById:function(args){args=args||{};var self=this;var id=args.id;if(!id){throw new Error(LOCALE.maketext("[asis,getById()] requires an ID argument."))}if(_instancesLookup&&!args.force&&!this._isCacheStale()){return self._getInstanceFromCache(id)}else if(!args.force&&pageState.instances){try{return self._getListFromPrefetch().then(function(){return self._getInstanceFromCache(id)},function(){return self.fetchById(id)})}catch(error){return self.fetchById(id)}}else{return self.fetchById(id)}},fetchById:function(id){if(!id){throw new Error(LOCALE.maketext("[asis,fetchById()] requires an ID argument."))}var self=this;var apiCall=new APIREQUEST.Class;apiCall.initialize("WordPressInstanceManager","get_instance_by_id");apiCall.addArgument("id",id);var api=new APIService;var def=api.deferred(apiCall);return def.promise.then(function success(response){if(response&&response.data){var instance=self._parseInstance(response.data);if(self._validateInstance(instance)){self._setById(instance);return $q.resolve(instance)}else{return $q.reject(LOCALE.maketext("The system retrieved the [asis,WordPress] installation with the “[_1]” ID, but the returned data contains empty or invalid fields.",id))}}return $q.reject(LOCALE.maketext("The system failed to retrieve the requested [asis,WordPress] installation with the following ID: [_1]",id))},function failure(error){return $q.reject(LOCALE.maketext("The system failed to retrieve the requested [asis,WordPress] installation with “[_1]” ID from the server: [_2]",id,error))})},parse:function(rawInstances){var self=this;if(!angular.isArray(rawInstances)){throw new Error(LOCALE.maketext("[asis,parse()] requires an array argument."))}if(!rawInstances.length){return[]}var parsedInstances=rawInstances.map(function(instance){return self._parseInstance(instance)}).filter(function(parsedInstance){return self._validateInstance(parsedInstance)});return parsedInstances},indexOf:function(search){if(angular.isUndefined(search)){throw new Error(LOCALE.maketext("[asis,indexOf()] requires an instance object argument."))}var i=this._findInsertionIndex(search);var curr;for(var l=_instances.length;i<l;i++){curr=_instances[i];if(curr.full_path!==search.full_path||curr.domain!==search.domain){break}else if(curr.id===search.id){return i}}return-1},_findInsertionIndex:function(search){return _.sortedIndexBy(_instances,search,function(item){return item.domain+item.full_path})},changeUserPassword:function(instanceId,username,password){if(!instanceId){return $q(function(resolve,reject){reject(LOCALE.maketext("You must provide an instance ID."))})}if(!username){return $q(function(resolve,reject){reject(LOCALE.maketext("You must provide a username."))})}if(!password){return $q(function(resolve,reject){reject(LOCALE.maketext("You must provide a password."))})}var apiCall=new APIREQUEST.Class;apiCall.initialize("WordPressInstanceManager","change_user_password");apiCall.addArgument("id",instanceId);apiCall.addArgument("user",username);apiCall.addArgument("password",password);var api=new APIService;return api.deferred(apiCall).promise},configureAutoupdate:function(instanceId,major,minor){var self=this;if(!instanceId){return $q(function(resolve,reject){reject(LOCALE.maketext("You must provide an instance ID."))})}var apiCall=new APIREQUEST.Class;apiCall.initialize("WordPressInstanceManager","configure_autoupdate");apiCall.addArgument("id",instanceId);apiCall.addArgument("autoupdate.core.major",major?1:0);apiCall.addArgument("autoupdate.core.minor",minor?1:0);var api=new APIService;return api.deferred(apiCall).promise.then(function(response){if(response&&response.data&&response.data.after){var after=self._parseInstance(response.data.after);var id=response.data.after.id;if(self._validateInstance(after)){self._removeById(instanceId);self._setById(after);return $q.resolve(after)}else{return $q.reject(LOCALE.maketext("The system retrieved the [asis,WordPress] installation with the “[_1]” ID, but the returned data contains empty or invalid fields.",id))}}else{var instance=_instancesLookup[instanceId];if(instance){instance.autoupdate=major||minor}}return $q.resolve()})},changeDbPassword:function(instanceId,password){if(!instanceId){return $q(function(resolve,reject){reject(LOCALE.maketext("You must provide an instance ID."))})}if(!password){return $q(function(resolve,reject){reject(LOCALE.maketext("You must provide a password."))})}var apiCall=new APIREQUEST.Class;apiCall.initialize("WordPressInstanceManager","change_db_password");apiCall.addArgument("id",instanceId);apiCall.addArgument("password",password);var api=new APIService;return api.deferred(apiCall).promise},clear:function(){_instances=undefined;_instancesLookup={};_invalidCount=0;_lastLoaded=undefined},_isCacheStale:function(){return!_lastLoaded||Date.now()-_lastLoaded>_cacheTime},_validateInstance:function(instance){var keys=Object.keys(instance);if(!keys||!keys.length){return false}var isValid=keys.every(function(key){var value=instance[key];if(!angular.isDefined(value)){$log.warn(LOCALE.maketext("The configuration contains an invalid field, “[_1]”, with a value of, “[_2]”.",key,"undefined"));return false}if(angular.isString(value)&&key!=="rel_path"&&value===""){$log.warn(LOCALE.maketext("The configuration contains an invalid field, “[_1]”, with a value of, “[_2]”.",key,"empty string"));return false}return true});if(!isValid){$log.warn(LOCALE.maketext("The instance “[_1]” does not contain a required value.",JSON.stringify(instance)))}return isValid},_parseInstance:function(instance){if(angular.isDefined(instance.autoupdate)){instance.autoupdate=PARSER.parsePerlBoolean(instance.autoupdate)}if(angular.isString(instance.rel_path)){instance.rel_path=instance.rel_path.replace(/\/+$/,"")}if(angular.isString(instance.full_path)){instance.full_path=instance.full_path.replace(/\/+$/,"")}if(angular.isString(instance.domain)){instance.domain=instance.domain.toLocaleLowerCase()}return instance},_set:function(args){_instances=Object.freeze(this._sort(args.parsed));_instancesLookup={};_instances.forEach(function(instance){_instancesLookup[instance.id]=instance});_invalidCount=args.raw.length-_instances.length;_lastLoaded=Date.now()},_removeById:function(id){var instance=_instancesLookup[id];if(instance){delete _instancesLookup[id];var index=this.indexOf(instance);if(index>-1){var newInstanceList=_instances.slice();newInstanceList.splice(index,1);_instances=Object.freeze(newInstanceList);_lastLoaded=Date.now()}}},_setById:function(newInstance){var self=this;var _updateInstance=function(){var newInstanceList=_instances.slice();var existingInstance=_instancesLookup[newInstance.id];if(existingInstance){var existingIndex=self.indexOf(existingInstance);if(existingIndex>-1){newInstanceList.splice(existingIndex,1)}}var newIndex=self._findInsertionIndex(newInstance);newInstanceList.splice(newIndex,0,newInstance);_instances=Object.freeze(newInstanceList);_instancesLookup[newInstance.id]=newInstance;_lastLoaded=Date.now()};if(!_instances){self.get().then(_updateInstance)}else{_updateInstance()}},_get:function(){return{instances:_instances,instancesLookup:_instancesLookup,invalidCount:_invalidCount,lastLoaded:_lastLoaded,cacheTime:_cacheTime}},_getListFromPrefetch:function(){this._set({raw:pageState.instances,parsed:this.parse(pageState.instances)});var prefetchNonFatalErrors=pageState.prefetchNonFatalErrors;delete pageState.instances;delete pageState.prefetchNonFatalErrors;return this._getListFromCache({nonFatalErrors:prefetchNonFatalErrors})},_getListFromCache:function(args){var nonFatalErrors=args&&angular.isArray(args.nonFatalErrors)&&args.nonFatalErrors||[];return $q(function(resolve){resolve({instances:_instances,invalidCount:_invalidCount,nonFatalErrors:nonFatalErrors})})},_getInstanceFromCache:function(id){var instance=_instancesLookup[id];if(instance){return $q.resolve(instance)}else{return this.fetchById(id)}},_sort:function(instances){return _.sortBy(instances,["domain","full_path"])}}}])});
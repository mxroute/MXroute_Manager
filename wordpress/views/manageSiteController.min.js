define(["angular","cjt/util/locale","app/util/versionComparison","app/util/versionCheck","uiBootstrap","cjt/services/alertService","cjt/directives/alertList","cjt/directives/toggleSwitchDirective","app/services/instancesApi","app/directives/changePassword","app/directives/urlInputDirective"],function(angular,LOCALE,compare,CHECKS){var app=angular.module("cpanel.wordpress");var controller=app.controller("manageSiteController",["$scope","$timeout","$routeParams","$location","growl","instancesApi","alertService",function($scope,$timeout,$routeParams,$location,growl,instancesApi,alertService){var _initializeScope=function(){$scope.site={id:window.decodeURIComponent($routeParams.id)};$scope.ui={showAdvanced:false,isRefreshing:false,viewDoneLoading:false,showChangeAdminPassword:false,showChangeDbPassword:false,selectedAdminUsername:undefined};$scope.getInstanceInfo()};var _initializeView=function(){alertService.clear(void 0,"adminPassword");alertService.clear(void 0,"dbPassword")};$scope.getInstanceInfo=function(){if($scope.site.id){$scope.instanceLoadError=null;$scope.ui.isRefreshing=true;return instancesApi.getById({id:$scope.site.id,force:true}).then(function(instance){$scope.ui.invalidInstance=!instance||!Object.keys(instance).length;if(!$scope.ui.invalidInstance){$scope.site=instance;if(instance.admins&&instance.admins.length===1){$scope.ui.selectedAdminUsername=instance.admins[0].user_login}if(instance.error){$scope.instanceLoadError=instance.error}$scope.ui.minor_updates_only=$scope.site["autoupdate.core.minor"]&&!$scope.site["autoupdate.core.major"];$scope.ui.all_updates=$scope.site["autoupdate.core.minor"]&&$scope.site["autoupdate.core.major"]}},function(error){$scope.instanceLoadError=error;$scope.ui.invalidInstance=true}).finally(function(){$scope.ui.isRefreshing=false;$scope.ui.viewDoneLoading=true})}};$scope.getCurrentVersionText=function(site){if(site.current_version){return site.current_version}else{return LOCALE.maketext("Unknown")}};$scope.getAutoupdateText=function(site){if(site.autoupdate){if(site["autoupdate.core.minor"]&&site["autoupdate.core.major"]){return LOCALE.maketext("Enabled (Major Versions, Minor Versions, and Security Updates)")}else if(site["autoupdate.core.minor"]){return LOCALE.maketext("Enabled (Minor Versions and Security Updates)")}else{return LOCALE.maketext("Enabled (Major Versions)")}}else if("autoupdate"in site){return LOCALE.maketext("Disabled")}else{return LOCALE.maketext("Unknown")}};$scope.toggleAdvanced=function(){$scope.ui.showAdvanced=!$scope.ui.showAdvanced};$scope.toggleErrorDetail=function(){$scope.ui.showErrorDetail=!$scope.ui.showErrorDetail};$scope.toggleMinorUpdatesOnly=function(site){var original={site:{},ui:{}};original["site"]["autoupdate.core.minor"]=site["autoupdate.core.minor"];original["site"]["autoupdate.core.major"]=site["autoupdate.core.major"];original.ui.minor_updates_only=$scope.ui.minor_updates_only;original.ui.all_updates=$scope.ui.all_updates;$scope.ui.minor_updates_only=!$scope.ui.minor_updates_only;if($scope.ui.minor_updates_only){$scope.ui.all_updates=false}site["autoupdate.core.minor"]=$scope.ui.minor_updates_only||$scope.ui.all_updates;site["autoupdate.core.major"]=$scope.ui.all_updates;return instancesApi.configureAutoupdate($scope.site.id,site["autoupdate.core.major"],site["autoupdate.core.minor"]).then(function(updatedInstance){if(updatedInstance){$location.path("manage/"+updatedInstance.id);$location.replace()}alertService.clear(undefined,"autoUpdate")},function(error){site["autoupdate.core.minor"]=original["site"]["autoupdate.core.minor"];site["autoupdate.core.major"]=original["site"]["autoupdate.core.major"];$scope.ui.minor_updates_only=original.ui.minor_updates_only;$scope.ui.all_updates=original.ui.all_updates;alertService.add({id:"toggle-minor-updates-error",group:"autoUpdate",type:"danger",replace:true,message:LOCALE.maketext("The system failed to change the Automatic Update settings: [_1]",error)})})};$scope.toggleAllUpdates=function(site){var original={site:{},ui:{}};original["site"]["autoupdate.core.minor"]=site["autoupdate.core.minor"];original["site"]["autoupdate.core.major"]=site["autoupdate.core.major"];original.ui.minor_updates_only=$scope.ui.minor_updates_only;original.ui.all_updates=$scope.ui.all_updates;$scope.ui.all_updates=!$scope.ui.all_updates;if($scope.ui.all_updates){$scope.ui.minor_updates_only=false}site["autoupdate.core.minor"]=$scope.ui.minor_updates_only||$scope.ui.all_updates;site["autoupdate.core.major"]=$scope.ui.all_updates;return instancesApi.configureAutoupdate($scope.site.id,site["autoupdate.core.major"],site["autoupdate.core.minor"]).then(function(updatedInstance){if(updatedInstance){$location.path("manage/"+updatedInstance.id);$location.replace()}alertService.clear(undefined,"autoUpdate")},function(error){site["autoupdate.core.minor"]=original["site"]["autoupdate.core.minor"];site["autoupdate.core.major"]=original["site"]["autoupdate.core.major"];$scope.ui.minor_updates_only=original.ui.minor_updates_only;$scope.ui.all_updates=original.ui.all_updates;alertService.add({id:"toggle-minor-updates-error",group:"autoUpdate",type:"danger",replace:true,message:LOCALE.maketext("The system failed to change the Automatic Update settings: [_1]",error)})})};$scope.showChangeAdminPassword=function(){alertService.clear(undefined,"adminPassword");$scope.ui.showChangeAdminPassword=true};$scope.hideChangeAdminPassword=function(){$scope.ui.showChangeAdminPassword=false};$scope.changeAdminPassword=function(newPass){var username=$scope.ui.selectedAdminUsername;return instancesApi.changeUserPassword($scope.site.id,username,newPass).then(function(){alertService.add({id:"change-admin-pass-success",group:"adminPassword",type:"success",replace:true,message:LOCALE.maketext("The system succesfully changed the [asis,WordPress] password for “[_1]”.",username)})},function(error){alertService.add({id:"change-admin-pass-error",group:"adminPassword",type:"danger",replace:true,message:LOCALE.maketext("The system failed to change the [asis,WordPress] password for “[_1]” with the following error: [_2]",username,error)})}).finally(function(){$scope.hideChangeAdminPassword()})};$scope.showChangeDbPassword=function(){alertService.clear(undefined,"dbPassword");$scope.ui.showChangeDbPassword=true};$scope.hideChangeDbPassword=function(){$scope.ui.showChangeDbPassword=false};$scope.changeDbPassword=function(newPass){return instancesApi.changeDbPassword($scope.site.id,newPass).then(function(){alertService.add({id:"change-db-pass-success",group:"dbPassword",type:"success",replace:true,message:LOCALE.maketext("The system succesfully changed the [asis,WordPress] database user’s password.")})},function(error){alertService.add({id:"change-db-pass-error",group:"dbPassword",type:"danger",replace:true,message:LOCALE.maketext("The system failed to change the [asis,WordPress] database password with the following error: [_1]",error)})}).finally(function(){$scope.hideChangeDbPassword()})};$scope.isCurrentVersionOutOfDate=function(site){return site.available_version&&site.current_version&&compare(site.available_version,site.current_version)===1};$scope.hasMajorUpgrade=function(site){return CHECKS.isMajorUpgrade(site.current_version,site.available_version)};$scope.hasMinorUpgrade=function(site){return CHECKS.isMinorUpgrade(site.current_version,site.available_version)};$scope.willCurrentVersionAutoUpdate=function(site){var hasMajor=$scope.hasMajorUpgrade(site);var hasMinor=$scope.hasMinorUpgrade(site);if(hasMajor&&site["autoupdate.core.major"]){return true}else if(hasMinor&&site["autoupdate.core.minor"]){return true}return false};$scope.shouldShowLegacyUpdatesInfo=function(site){return site.addon_type==="legacy"&&!site.autoupdate};_initializeScope();_initializeView()}]);return controller});
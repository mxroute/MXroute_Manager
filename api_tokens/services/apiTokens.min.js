define(["angular","lodash","cjt/util/locale","cjt/io/uapi-request","cjt/io/batch-request","cjt/modules","cjt/io/api","cjt/io/uapi","cjt/services/APICatcher"],function(angular,_,LOCALE,APIRequest,BatchAPIRequest){"use strict";var MODULE_NAMESPACE="cpanel.apiTokens.services.apiTokens";var SERVICE_NAME="APITokensService";var MODULE_REQUIREMENTS=["cjt2.services.apicatcher"];var SERVICE_INJECTABLES=["APICatcher","$q","$log"];var APIToken=function(id,unrestricted,features,createdOn){this.id=id;this.new=false;this.label=id;this.unrestricted=unrestricted;if(!_.isBoolean(unrestricted)){this.unrestricted=unrestricted&&unrestricted.toString()==="1"}this.features=features;this.createdOn=parseInt(createdOn,10)};var SERVICE_FACTORY=function(APICatcher,$q,$log){var Service=function(){};Service.prototype=Object.create(APICatcher);_.assign(Service.prototype,{_featuresMetadata:null,_tokens:[],_promise:function _promise(){return APICatcher.promise.apply(this,arguments)},_apiCall:function _createApiCall(module,func,args){var apiCall=new APIRequest.Class;apiCall.initialize(module,func,args);return apiCall},_batchAPICall:function _createBatchAPICall(apiCalls){var batchAPICall=new BatchAPIRequest.Class(apiCalls);return batchAPICall},_processAPITokenResult:function _processAPITokenResult(apiTokenResult){var id=apiTokenResult.name;var unrestricted=apiTokenResult.has_full_access;var features=apiTokenResult.features;var createdOn=apiTokenResult.create_time;return new APIToken(id,unrestricted,features,createdOn)},_processAPITokensResults:function _processAPITokensResults(results){var apiTokens=results.data;this._tokens=apiTokens.map(this._processAPITokenResult.bind(this));return this._tokens},_fetchTokens:function _getAPITokens(){var apiCall=this._apiCall("Tokens","list");return apiCall},_deleteToken:function _deleteAPIToken(id){var apiCall=this._apiCall("Tokens","revoke",{name:id});return apiCall},_processFeatureResult:function _processFeatureResult(installed,featureKey,featureLabel,badges){return{label:featureLabel,id:featureKey,installed:installed&&installed.toString()==="1",badges:badges}},_processFeaturesResults:function _processFeaturesResults(results){var self=this;var data=results.data;if(data){var features=[];angular.forEach(data,function(installed,featureKey){var featureLabel=featureKey;var badges=[];if(self._featuresMetadata&&self._featuresMetadata[featureKey]){var featureMeta=self._featuresMetadata[featureKey];featureLabel=featureMeta.name;if(featureMeta.is_cpaddon.toString()==="1"){badges.push(LOCALE.maketext("[asis,cPAddon]"))}if(featureMeta.is_plugin.toString()==="1"){badges.push(LOCALE.maketext("Plugin"))}}features.push(self._processFeatureResult(installed,featureKey,featureLabel,badges))});var installedFeatures=features.filter(function(feature){return feature.installed});return _.sortBy(installedFeatures,function(feature){return feature.label})}},_getFeatures:function _getFeatures(){var apiCall=this._apiCall("Features","list_features");return apiCall},_processFeatureMetadataResult:function _processFeatureMetadataResult(result){var data=result.data;this._featuresMetadata={};if(data){data.forEach(function(featureMetaItem){this._featuresMetadata[featureMetaItem.id]=featureMetaItem},this)}},fetchTokens:function getAPITokens(){var apiCall=this._fetchTokens();return this._promise(apiCall).then(this._processAPITokensResults.bind(this))},getTokens:function getTokens(){return this._tokens},deleteTokens:function deleteAPITokens(tokens){var self=this;var tokenCalls=tokens.map(self._deleteToken.bind(self)).map(self._promise.bind(self));return $q.all(tokenCalls).then(self.fetchTokens.bind(self))},getFeatures:function getFeatures(){var self=this;var featuresAPICall=this._getFeatures();var apiCalls=[featuresAPICall];if(!self._featuresMetadata){apiCalls.unshift(this._apiCall("Features","get_feature_metadata"))}var batchCall=self._batchAPICall(apiCalls);return self._promise(batchCall).then(function _separateBatchResults(result){result.data=result.data.map(function _getParsedResponses(dataItem){return dataItem.parsedResponse});if(apiCalls.length>1){var featureMetadataResult=result.data.shift();self._processFeatureMetadataResult.call(self,featureMetadataResult)}return result.data.pop()}).then(self._processFeaturesResults.bind(self))},_processTokenCreationResults:function _processTokenCreationResults(id,unrestricted,features,results){var data=results.data;var newToken=new APIToken(id,unrestricted,features,(new Date).getTime()/1e3);newToken.new=true;this._tokens.push(newToken);return data.token},createToken:function createToken(id,unrestricted,features){var apiCall;if(unrestricted){apiCall=this._apiCall("Tokens","create_full_access",{name:id})}else{apiCall=this._apiCall("Tokens","create_limited",{name:id,feature:features})}return this._promise(apiCall).then(this._processTokenCreationResults.bind(this,id,unrestricted,features))},getTokenById:function getTokenById(id){var tokens=this.getTokens();for(var i=0;i<tokens.length;i++){if(tokens[i].id===id){return tokens[i]}}return},updateTokenRestrictions:function updateTokenRestrictions(tokenName,unrestricted,features){var apiCall;var self=this;if(unrestricted){apiCall=this._apiCall("Tokens","set_full_access",{name:tokenName})}else{apiCall=this._apiCall("Tokens","set_features",{name:tokenName,feature:features})}return self._promise(apiCall).then(function(){var token=self.getTokenById(tokenName);token.unrestricted=unrestricted;token.features=features})},renameToken:function renameToken(tokenName,newTokenName){var apiCall=this._apiCall("Tokens","rename",{name:tokenName,new_name:newTokenName});return this._promise(apiCall)}});return new Service};SERVICE_INJECTABLES.push(SERVICE_FACTORY);var app=angular.module(MODULE_NAMESPACE,MODULE_REQUIREMENTS);app.factory(SERVICE_NAME,SERVICE_INJECTABLES);return{"class":SERVICE_FACTORY,serviceName:SERVICE_NAME,namespace:MODULE_NAMESPACE}});
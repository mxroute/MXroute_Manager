define(["angular","cjt/util/locale","cjt/validator/validator-utils","app/services/apiTokens","cjt/validator/validateDirectiveFactory"],function(angular,LOCALE,validationUtils,APITokensService){"use strict";var _apiTokens;var factoryMethods={_lastFetch:0,_processLoadedTokens:function(tokens){_apiTokens=null;if(tokens){_apiTokens={};tokens.forEach(function(token){_apiTokens[token.id]=token})}return _apiTokens},_fetchTokens:function(){return _apiTokens}};var tokenIsUniqueValidator={tokenNameIsUnique:function(tokenName,validatorArgument){var result=validationUtils.initializeValidationResult();var _apiTokens=factoryMethods._fetchTokens();if(validatorArgument&&tokenName===validatorArgument){return result}if(!_apiTokens||tokenName&&_apiTokens[tokenName]){result.isValid=false;result.add("tokenNameIsUnique",LOCALE.maketext("This [asis,API] token name already exists on this account. Enter a different name."),"tokenNameIsUnique")}return result},validate:function($service,$q,value,argument,scope){var curDate=(new Date).getTime();if(factoryMethods._fetchTokens()&&curDate-factoryMethods._lastFetch<1e3){var result=tokenIsUniqueValidator.tokenNameIsUnique(value,argument,scope);return $q.resolve(result)}factoryMethods._lastFetch=curDate;return $service.fetchTokens().then(function(tokens){factoryMethods._processLoadedTokens(tokens);var result=tokenIsUniqueValidator.tokenNameIsUnique(value,argument,scope);return $q.resolve(result)})}};var validatorModule=angular.module("cjt2.validate");validatorModule.run(["validatorFactory","$q",APITokensService.serviceName,function(validatorFactory,$q,$service){var validators={tokenNameIsUnique:tokenIsUniqueValidator.validate.bind(tokenIsUniqueValidator,$service,$q)};validators.tokenNameIsUnique.async=true;validatorFactory.generate(validators,$q)}]);return{methods:tokenIsUniqueValidator,factoryMethods:factoryMethods,name:"token-name-is-unique",description:"Validation to ensure the api Token is unique for this account.",version:1}});